/*
 * unified
 *
 * API generated from yang definitions: [fake,frinx-acl-extension,frinx-bfd,frinx-bfd-extension,frinx-bgp-extension,frinx-cdp,frinx-cisco-if-extension,frinx-cisco-mpls-te-extension,frinx-cisco-ospf-extension,frinx-cisco-pf-interfaces-extension,frinx-damping,frinx-dasan-vlan-extension,frinx-event-types,frinx-evpn,frinx-evpn-types,frinx-hsrp,frinx-if-aggregate-extension,frinx-isis-extension,frinx-juniper-if-aggregate-extension,frinx-juniper-if-extension,frinx-juniper-pf-interfaces-extension,frinx-juniper-probes-extension,frinx-l3ipvlan,frinx-lacp-lag-member,frinx-logging,frinx-mpls-ldp-extension,frinx-mpls-rsvp-extension,frinx-netflow,frinx-openconfig-acl,frinx-openconfig-bfd,frinx-openconfig-bgp,frinx-openconfig-bgp-policy,frinx-openconfig-bgp-types,frinx-openconfig-extensions,frinx-openconfig-if-aggregate,frinx-openconfig-if-ethernet,frinx-openconfig-if-ip,frinx-openconfig-if-ip-ext,frinx-openconfig-inet-types,frinx-openconfig-interfaces,frinx-openconfig-isis,frinx-openconfig-isis-lsdb-types,frinx-openconfig-isis-policy,frinx-openconfig-isis-types,frinx-openconfig-lacp,frinx-openconfig-lldp,frinx-openconfig-lldp-types,frinx-openconfig-local-routing,frinx-openconfig-mpls,frinx-openconfig-mpls-ldp,frinx-openconfig-mpls-rsvp,frinx-openconfig-mpls-types,frinx-openconfig-network-instance,frinx-openconfig-network-instance-l3,frinx-openconfig-network-instance-policy,frinx-openconfig-network-instance-types,frinx-openconfig-ospf-policy,frinx-openconfig-ospf-types,frinx-openconfig-ospfv2,frinx-openconfig-packet-match,frinx-openconfig-packet-match-types,frinx-openconfig-platform,frinx-openconfig-platform-linecard,frinx-openconfig-platform-port,frinx-openconfig-platform-transceiver,frinx-openconfig-platform-types,frinx-openconfig-policy-forwarding,frinx-openconfig-policy-types,frinx-openconfig-probes,frinx-openconfig-probes-types,frinx-openconfig-qos,frinx-openconfig-qos-types,frinx-openconfig-rib-bgp,frinx-openconfig-rib-bgp-ext,frinx-openconfig-rib-bgp-types,frinx-openconfig-routing-policy,frinx-openconfig-transport-types,frinx-openconfig-types,frinx-openconfig-vlan,frinx-openconfig-vlan-types,frinx-openconfig-yang-types,frinx-ospf-extension,frinx-qos-extension,frinx-snmp,frinx-uniconfig-topology,iana-if-type,ietf-inet-types,ietf-interfaces,ietf-yang-types,network-topology,network-topology,unified-topology,yang-ext]
 *
 * API version: 4.2.0.frinx
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger_unified

// Optional[Configuration parameters related to TE tunnels:] REF:Optional.empty
type FrinxOpenconfigMplsTetunnelstopTunnelsTunnelConfig struct {
	// Optional[frequency of reoptimization of a traffic engineered LSP] REF:Optional.empty
	ReoptimizeTimer int32 `json:"reoptimize-timer,omitempty"`
	// Optional[Whether this LSP is considered to be eligible for us as a shortcut in the IGP. In the case that this leaf is set to true, the IGP SPF calculation uses the metric specified to determine whether traffic should be carried over this LSP] REF:Optional.empty
	ShortcutEligible bool `json:"shortcut-eligible,omitempty"`
	// Optional[The type of metric specification that should be used to set the LSP(s) metric] REF:Optional.empty
	MetricType *FrinxOpenconfigMplsMetricTypeIdentityref `json:"metric-type,omitempty"`
	// Optional[Specifies a preference for this tunnel. A lower number signifies a better preference] REF:Optional.empty
	Preference int32 `json:"preference,omitempty"`
	// Optional[optional text description for the tunnel] REF:Optional.empty
	Description string `json:"description,omitempty"`
	// Optional[RSVP-TE tunnel source address] REF:Optional.empty
	Source string `json:"source,omitempty"`
	// Optional[Tunnel type, p2p or p2mp] REF:Optional.empty
	Type_ *FrinxOpenconfigMplsTypeIdentityref `json:"type,omitempty"`
	// Optional[preemption priority once the LSP is established, lower is higher priority; default 0 indicates other LSPs will not preempt the LSPs once established] REF:Optional[RFC 3209 - RSVP-TE: Extensions to RSVP for LSP Tunnels]
	HoldPriority int32 `json:"hold-priority,omitempty"`
	// Optional[style of mpls frr protection desired: can be link, link-node or unprotected.] REF:Optional.empty
	ProtectionStyleRequested *FrinxOpenconfigMplsProtectionStyleRequestedIdentityref `json:"protection-style-requested,omitempty"`
	// Optional[TE tunnel administrative state.] REF:Optional.empty
	AdminStatus *FrinxOpenconfigMplsAdminStatusIdentityref `json:"admin-status,omitempty"`
	// Optional[Enables RSVP soft-preemption on this LSP] REF:Optional.empty
	SoftPreemption bool `json:"soft-preemption,omitempty"`
	// Optional[The value of the metric that should be specified. The value supplied in this leaf is used in conjunction with the metric type to determine the value of the metric used by the system. Where the metric-type is set to LSP_METRIC_ABSOLUTE - the value of this leaf is used directly; where it is set to LSP_METRIC_RELATIVE, the relevant (positive or negative) offset is used to formulate the metric; where metric-type is LSP_METRIC_INHERITED, the value of this leaf is not utilised] REF:Optional.empty
	Metric int32 `json:"metric,omitempty"`
	// Optional[Signaling protocol used to set up this tunnel] REF:Optional.empty
	SignalingProtocol *FrinxOpenconfigMplsSignalingProtocolIdentityref `json:"signaling-protocol,omitempty"`
	// Optional[The tunnel name] REF:Optional.empty
	Name string `json:"name,omitempty"`
	// Optional[RSVP-TE preemption priority during LSP setup, lower is higher priority; default 7 indicates that LSP will not preempt established LSPs during setup] REF:Optional[RFC 3209 - RSVP-TE: Extensions to RSVP for LSP Tunnels]
	SetupPriority int32 `json:"setup-priority,omitempty"`
}
