/*
 * southbound
 *
 * API generated from yang definitions: [aaa-encrypt-service-config,cli-topology,cli-translate-registry,cluster-singleton-service-impl,cluster-singleton-service-spi,config,fake,general-entity,ietf-inet-types,ietf-netconf,ietf-netconf-monitoring,ietf-netconf-monitoring-extension,ietf-netconf-notifications,ietf-yang-library,ietf-yang-types,journal,nc-notifications,netconf-keystore,netconf-node-inventory,netconf-node-topology,network-topology,network-topology,notifications,opendaylight-config-dom-datastore,opendaylight-entity-ownership-service,opendaylight-inmemory-datastore-provider,opendaylight-inventory,opendaylight-legacy-entity-ownership-service-provider,opendaylight-md-sal-common,opendaylight-md-sal-dom,opendaylight-operational-dom-datastore,rpc-context,yang-ext]
 *
 * API version: 4.2.0.frinx
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger_southbound

// Optional.empty REF:Optional.empty
type NetconfNodeTopologyCreatedeviceInput struct {
	// Optional[Limit of concurrent messages that can be send before reply messages are received. If value <1 is provided, no limit will be enforced] REF:Optional.empty
	ConcurrentRpcLimit int32 `json:"concurrent-rpc-limit,omitempty"`
	// Optional.empty REF:Optional.empty
	NodeId string `json:"node-id,omitempty"`
	// Optional[Maximum number of connection retries. Non positive value or null is interpreted as infinity.] REF:Optional.empty
	MaxConnectionAttempts int64 `json:"max-connection-attempts,omitempty"`
	// Optional.empty REF:Optional.empty
	TcpOnly bool `json:"tcp-only,omitempty"`
	UnavailableCapabilities *NetconfNodeTopologyNetconfnodeconnectionstatusUnavailableCapabilities `json:"unavailable-capabilities,omitempty"`
	// Optional[If true, the connector would auto disconnect/reconnect when schemas are changed in the remote device. The connector subscribes (right after connect) to base netconf notifications and listens for netconf-capability-change notification] REF:Optional.empty
	ReconnectOnChangedSchema bool `json:"reconnect-on-changed-schema,omitempty"`
	// Optional[Size of the DRY RUN netconf mountpoint jounral. DRY RUN journal captures netconf RPCs that would be executed when reading/writing some configuration. However the RPCs are not actually sent to the device] REF:Optional.empty
	DryRunJournalSize int32 `json:"dry-run-journal-size,omitempty"`
	NonModuleCapabilities *NetconfNodeTopologyNetconfnodeconnectionparametersNonModuleCapabilities `json:"non-module-capabilities,omitempty"`
	YangModuleCapabilities *NetconfNodeTopologyNetconfnodeconnectionparametersYangModuleCapabilities `json:"yang-module-capabilities,omitempty"`
	// Optional.empty REF:Optional.empty
	Password string `json:"password,omitempty"`
	// Optional.empty REF:Optional.empty
	SleepFactor int32 `json:"sleep-factor,omitempty"`
	// Optional.empty REF:Optional.empty
	Host string `json:"host,omitempty"`
	OdlHelloMessageCapabilities *NetconfNodeTopologyNetconfnodeconnectionparametersOdlHelloMessageCapabilities `json:"odl-hello-message-capabilities,omitempty"`
	ClusteredConnectionStatus *NetconfNodeTopologyNetconfnodeconnectionstatusClusteredConnectionStatus `json:"clustered-connection-status,omitempty"`
	YangLibrary *NetconfNodeTopologyNetconfschemastorageYangLibrary `json:"yang-library,omitempty"`
	// Optional.empty REF:Optional.empty
	ConnectionStatus *NetconfNodeTopologyConnectionStatusEnumeration `json:"connection-status,omitempty"`
	// Optional[Initial timeout in milliseconds to wait between connection attempts. Will be multiplied by sleep-factor with every additional attempt] REF:Optional.empty
	BetweenAttemptsTimeoutMillis int32 `json:"between-attempts-timeout-millis,omitempty"`
	KeyBased *NetconfNodeTopologyNetconfnodecredentialsCredentialsKeyauthKeyBased `json:"key-based,omitempty"`
	// Optional[Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds If a value <1 is provided, no keepalives will be sent] REF:Optional.empty
	KeepaliveDelay int64 `json:"keepalive-delay,omitempty"`
	// Optional.empty REF:Optional.empty
	Schemaless bool `json:"schemaless,omitempty"`
	// Optional[Timeout for blocking operations within transactions.] REF:Optional.empty
	DefaultRequestTimeoutMillis int64 `json:"default-request-timeout-millis,omitempty"`
	// Optional[Specifies timeout in milliseconds after which connection must be established.] REF:Optional.empty
	ConnectionTimeoutMillis int64 `json:"connection-timeout-millis,omitempty"`
	// Optional.empty REF:Optional.empty
	Port int32 `json:"port,omitempty"`
	AvailableCapabilities *NetconfNodeTopologyNetconfnodeconnectionstatusAvailableCapabilities `json:"available-capabilities,omitempty"`
	LoginPasswordUnencrypted *NetconfNodeTopologyNetconfnodecredentialsCredentialsLoginpwunencryptedLoginPasswordUnencrypted `json:"login-password-unencrypted,omitempty"`
	// Optional.empty REF:Optional.empty
	CustomizationFactory string `json:"customization-factory,omitempty"`
	LoginPassword *NetconfNodeTopologyNetconfnodecredentialsCredentialsLoginpwunencryptedLoginPasswordUnencrypted `json:"login-password,omitempty"`
	// Optional[The destination schema repository for yang files relative to the cache directory.  This may be specified per netconf mount so that the loaded yang files are stored to a distinct directory to avoid potential conflict.] REF:Optional.empty
	SchemaCacheDirectory string `json:"schema-cache-directory,omitempty"`
	// Optional.empty REF:Optional.empty
	ConnectedMessage string `json:"connected-message,omitempty"`
	// Optional[Time that slave actor will wait for response from master.] REF:Optional.empty
	ActorResponseWaitTime int32 `json:"actor-response-wait-time,omitempty"`
	// Optional[When the underlying node is connected, its NETCONF context is available verbatim under this container through the mount extension.] REF:Optional.empty
	PassThrough *interface{} `json:"pass-through,omitempty"`
	// Optional.empty REF:Optional.empty
	Username string `json:"username,omitempty"`
}
