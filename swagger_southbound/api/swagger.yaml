---
swagger: "2.0"
info:
  description: "API generated from yang definitions: [aaa-encrypt-service-config,cli-topology,cli-translate-registry,cluster-singleton-service-impl,cluster-singleton-service-spi,config,fake,general-entity,ietf-inet-types,ietf-netconf,ietf-netconf-monitoring,ietf-netconf-monitoring-extension,ietf-netconf-notifications,ietf-yang-library,ietf-yang-types,journal,nc-notifications,netconf-keystore,netconf-node-inventory,netconf-node-topology,network-topology,network-topology,notifications,opendaylight-config-dom-datastore,opendaylight-entity-ownership-service,opendaylight-inmemory-datastore-provider,opendaylight-inventory,opendaylight-legacy-entity-ownership-service-provider,opendaylight-md-sal-common,opendaylight-md-sal-dom,opendaylight-operational-dom-datastore,rpc-context,yang-ext]"
  version: "4.2.0.frinx"
  title: "southbound"
host: "172.17.0.1:8181"
basePath: "/restconf"
schemes:
- "http"
consumes:
- "application/json"
- "application/xml"
produces:
- "application/json"
- "application/xml"
security:
- basicAuth: []
paths:
  /config/network-topology:network-topology/:
    get:
      tags:
      - "network-topology"
      operationId: "get_network-topology-network-topology"
      parameters: []
      responses:
        200:
          description: "network.topology.NetworkTopology"
          schema:
            type: "object"
            properties:
              network-topology:network-topology:
                $ref: "#/definitions/network.topology.NetworkTopology"
            title: "network.topology.NetworkTopology.response"
            description: "network.topology.NetworkTopology.response"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
    post:
      tags:
      - "network-topology"
      description: "creates network.topology.NetworkTopology"
      operationId: "post_network-topology-network-topology"
      parameters:
      - in: "body"
        name: "network.topology.NetworkTopology.body-param"
        description: "network.topology.NetworkTopology to be added to list"
        required: true
        schema:
          $ref: "#/definitions/network.topology.NetworkTopology"
        x-exportParamName: "NetworkTopologyNetworkTopologyBodyParam"
      responses:
        201:
          description: "Object created"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
        409:
          description: "Object already exists"
    put:
      tags:
      - "network-topology"
      description: "creates or updates network.topology.NetworkTopology"
      operationId: "put_network-topology-network-topology"
      parameters:
      - in: "body"
        name: "network.topology.NetworkTopology.body-param"
        description: "network.topology.NetworkTopology to be added or updated"
        required: true
        schema:
          $ref: "network.topology.NetworkTopology.request"
        x-exportParamName: "NetworkTopologyNetworkTopologyBodyParam"
      responses:
        200:
          description: "Object modified"
        201:
          description: "Object created"
        204:
          description: "Object modified"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
    delete:
      tags:
      - "network-topology"
      description: "removes network.topology.NetworkTopology"
      operationId: "delete_network-topology-network-topology"
      parameters: []
      responses:
        204:
          description: "Object deleted"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
  /config/network-topology:network-topology/network-topology:topology/:
    post:
      tags:
      - "network-topology"
      description: "creates network.topology.networktopology.Topology"
      operationId: "post_network-topology-network-topology_topology"
      parameters:
      - in: "body"
        name: "network.topology.networktopology.Topology.body-param"
        description: "network.topology.networktopology.Topology to be added to list"
        required: true
        schema:
          $ref: "#/definitions/network.topology.networktopology.Topology"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyBodyParam"
      responses:
        201:
          description: "Object created"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
        409:
          description: "Object already exists"
  /config/network-topology:network-topology/network-topology:topology/{topology-id}/:
    get:
      tags:
      - "network-topology"
      operationId: "get_network-topology-network-topology_topology"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      responses:
        200:
          description: "network.topology.networktopology.Topology"
          schema:
            type: "object"
            properties:
              network-topology:topology:
                type: "array"
                items:
                  $ref: "#/definitions/network.topology.networktopology.Topology"
            title: "network.topology.networktopology.Topology.response"
            description: "network.topology.networktopology.Topology.response"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
    post:
      tags:
      - "network-topology"
      description: "creates network.topology.networktopology.Topology"
      operationId: "post_network-topology-network-topology_topology"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - in: "body"
        name: "network.topology.networktopology.Topology.body-param"
        description: "network.topology.networktopology.Topology to be added to list"
        required: true
        schema:
          $ref: "#/definitions/network.topology.networktopology.Topology"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyBodyParam"
      responses:
        201:
          description: "Object created"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
        409:
          description: "Object already exists"
    put:
      tags:
      - "network-topology"
      description: "creates or updates network.topology.networktopology.Topology"
      operationId: "put_network-topology-network-topology_topology"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - in: "body"
        name: "network.topology.networktopology.Topology.body-param"
        description: "network.topology.networktopology.Topology to be added or updated"
        required: true
        schema:
          $ref: "network.topology.networktopology.Topology.request"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyBodyParam"
      responses:
        200:
          description: "Object modified"
        201:
          description: "Object created"
        204:
          description: "Object modified"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
    delete:
      tags:
      - "network-topology"
      description: "removes network.topology.networktopology.Topology"
      operationId: "delete_network-topology-network-topology_topology"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      responses:
        204:
          description: "Object deleted"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
  /config/network-topology:network-topology/network-topology:topology/{topology-id}/network-topology:link/:
    post:
      tags:
      - "network-topology"
      description: "creates network.topology.networktopology.topology.Link"
      operationId: "post_network-topology-network-topology_topology_link"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - in: "body"
        name: "network.topology.networktopology.topology.Link.body-param"
        description: "network.topology.networktopology.topology.Link to be added to\
          \ list"
        required: true
        schema:
          $ref: "#/definitions/network.topology.networktopology.topology.Link"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyLinkBodyParam"
      responses:
        201:
          description: "Object created"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
        409:
          description: "Object already exists"
  /config/network-topology:network-topology/network-topology:topology/{topology-id}/network-topology:link/{link-id}/:
    get:
      tags:
      - "network-topology"
      operationId: "get_network-topology-network-topology_topology_link"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "link-id"
        in: "path"
        description: "Id of link"
        required: true
        type: "string"
        x-exportParamName: "LinkId"
      responses:
        200:
          description: "network.topology.networktopology.topology.Link"
          schema:
            type: "object"
            properties:
              network-topology:link:
                type: "array"
                items:
                  $ref: "#/definitions/network.topology.networktopology.topology.Link"
            title: "network.topology.networktopology.topology.Link.response"
            description: "network.topology.networktopology.topology.Link.response"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
    post:
      tags:
      - "network-topology"
      description: "creates network.topology.networktopology.topology.Link"
      operationId: "post_network-topology-network-topology_topology_link"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "link-id"
        in: "path"
        description: "Id of link"
        required: true
        type: "string"
        x-exportParamName: "LinkId"
      - in: "body"
        name: "network.topology.networktopology.topology.Link.body-param"
        description: "network.topology.networktopology.topology.Link to be added to\
          \ list"
        required: true
        schema:
          $ref: "#/definitions/network.topology.networktopology.topology.Link"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyLinkBodyParam"
      responses:
        201:
          description: "Object created"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
        409:
          description: "Object already exists"
    put:
      tags:
      - "network-topology"
      description: "creates or updates network.topology.networktopology.topology.Link"
      operationId: "put_network-topology-network-topology_topology_link"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "link-id"
        in: "path"
        description: "Id of link"
        required: true
        type: "string"
        x-exportParamName: "LinkId"
      - in: "body"
        name: "network.topology.networktopology.topology.Link.body-param"
        description: "network.topology.networktopology.topology.Link to be added or\
          \ updated"
        required: true
        schema:
          $ref: "network.topology.networktopology.topology.Link.request"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyLinkBodyParam"
      responses:
        200:
          description: "Object modified"
        201:
          description: "Object created"
        204:
          description: "Object modified"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
    delete:
      tags:
      - "network-topology"
      description: "removes network.topology.networktopology.topology.Link"
      operationId: "delete_network-topology-network-topology_topology_link"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "link-id"
        in: "path"
        description: "Id of link"
        required: true
        type: "string"
        x-exportParamName: "LinkId"
      responses:
        204:
          description: "Object deleted"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
  /config/network-topology:network-topology/network-topology:topology/{topology-id}/network-topology:node/:
    post:
      tags:
      - "network-topology"
      description: "creates network.topology.networktopology.topology.Node"
      operationId: "post_network-topology-network-topology_topology_node"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - in: "body"
        name: "network.topology.networktopology.topology.Node.body-param"
        description: "network.topology.networktopology.topology.Node to be added to\
          \ list"
        required: true
        schema:
          $ref: "#/definitions/network.topology.networktopology.topology.Node"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyNodeBodyParam"
      responses:
        201:
          description: "Object created"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
        409:
          description: "Object already exists"
  /config/network-topology:network-topology/network-topology:topology/{topology-id}/network-topology:node/{node-id}/:
    get:
      tags:
      - "network-topology"
      operationId: "get_network-topology-network-topology_topology_node"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "node-id"
        in: "path"
        description: "Id of node"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      responses:
        200:
          description: "network.topology.networktopology.topology.Node"
          schema:
            type: "object"
            properties:
              network-topology:node:
                type: "array"
                items:
                  $ref: "#/definitions/network.topology.networktopology.topology.Node"
            title: "network.topology.networktopology.topology.Node.response"
            description: "network.topology.networktopology.topology.Node.response"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
    post:
      tags:
      - "network-topology"
      description: "creates network.topology.networktopology.topology.Node"
      operationId: "post_network-topology-network-topology_topology_node"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "node-id"
        in: "path"
        description: "Id of node"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - in: "body"
        name: "network.topology.networktopology.topology.Node.body-param"
        description: "network.topology.networktopology.topology.Node to be added to\
          \ list"
        required: true
        schema:
          $ref: "#/definitions/network.topology.networktopology.topology.Node"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyNodeBodyParam"
      responses:
        201:
          description: "Object created"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
        409:
          description: "Object already exists"
    put:
      tags:
      - "network-topology"
      description: "creates or updates network.topology.networktopology.topology.Node"
      operationId: "put_network-topology-network-topology_topology_node"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "node-id"
        in: "path"
        description: "Id of node"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - in: "body"
        name: "network.topology.networktopology.topology.Node.body-param"
        description: "network.topology.networktopology.topology.Node to be added or\
          \ updated"
        required: true
        schema:
          $ref: "network.topology.networktopology.topology.Node.request"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyNodeBodyParam"
      responses:
        200:
          description: "Object modified"
        201:
          description: "Object created"
        204:
          description: "Object modified"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
    delete:
      tags:
      - "network-topology"
      description: "removes network.topology.networktopology.topology.Node"
      operationId: "delete_network-topology-network-topology_topology_node"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "node-id"
        in: "path"
        description: "Id of node"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      responses:
        204:
          description: "Object deleted"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
  /config/network-topology:network-topology/network-topology:topology/{topology-id}/network-topology:topology-types/:
    get:
      tags:
      - "network-topology"
      operationId: "get_network-topology-network-topology_topology_topology-types"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      responses:
        200:
          description: "network.topology.networktopology.topology.TopologyTypes"
          schema:
            type: "object"
            properties:
              network-topology:topology-types:
                $ref: "#/definitions/network.topology.networktopology.topology.TopologyTypes"
            title: "network.topology.networktopology.topology.TopologyTypes.response"
            description: "network.topology.networktopology.topology.TopologyTypes.response"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
    post:
      tags:
      - "network-topology"
      description: "creates network.topology.networktopology.topology.TopologyTypes"
      operationId: "post_network-topology-network-topology_topology_topology-types"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - in: "body"
        name: "network.topology.networktopology.topology.TopologyTypes.body-param"
        description: "network.topology.networktopology.topology.TopologyTypes to be\
          \ added to list"
        required: true
        schema:
          $ref: "#/definitions/network.topology.networktopology.topology.TopologyTypes"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyTopologyTypesBodyParam"
      responses:
        201:
          description: "Object created"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
        409:
          description: "Object already exists"
    put:
      tags:
      - "network-topology"
      description: "creates or updates network.topology.networktopology.topology.TopologyTypes"
      operationId: "put_network-topology-network-topology_topology_topology-types"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - in: "body"
        name: "network.topology.networktopology.topology.TopologyTypes.body-param"
        description: "network.topology.networktopology.topology.TopologyTypes to be\
          \ added or updated"
        required: true
        schema:
          $ref: "network.topology.networktopology.topology.TopologyTypes.request"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyTopologyTypesBodyParam"
      responses:
        200:
          description: "Object modified"
        201:
          description: "Object created"
        204:
          description: "Object modified"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
    delete:
      tags:
      - "network-topology"
      description: "removes network.topology.networktopology.topology.TopologyTypes"
      operationId: "delete_network-topology-network-topology_topology_topology-types"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      responses:
        204:
          description: "Object deleted"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
  /config/network-topology:network-topology/network-topology:topology/{topology-id}/network-topology:underlay-topology/:
    post:
      tags:
      - "network-topology"
      description: "creates network.topology.networktopology.topology.UnderlayTopology"
      operationId: "post_network-topology-network-topology_topology_underlay-topology"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - in: "body"
        name: "network.topology.networktopology.topology.UnderlayTopology.body-param"
        description: "network.topology.networktopology.topology.UnderlayTopology to\
          \ be added to list"
        required: true
        schema:
          $ref: "#/definitions/network.topology.networktopology.topology.UnderlayTopology"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyUnderlayTopologyBodyParam"
      responses:
        201:
          description: "Object created"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
        409:
          description: "Object already exists"
  ? /config/network-topology:network-topology/network-topology:topology/{topology-id}/network-topology:underlay-topology/{topology-ref}/
  : get:
      tags:
      - "network-topology"
      operationId: "get_network-topology-network-topology_topology_underlay-topology"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "topology-ref"
        in: "path"
        description: "Id of underlay-topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyRef"
      responses:
        200:
          description: "network.topology.networktopology.topology.UnderlayTopology"
          schema:
            type: "object"
            properties:
              network-topology:underlay-topology:
                type: "array"
                items:
                  $ref: "#/definitions/network.topology.networktopology.topology.UnderlayTopology"
            title: "network.topology.networktopology.topology.UnderlayTopology.response"
            description: "network.topology.networktopology.topology.UnderlayTopology.response"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
    post:
      tags:
      - "network-topology"
      description: "creates network.topology.networktopology.topology.UnderlayTopology"
      operationId: "post_network-topology-network-topology_topology_underlay-topology"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "topology-ref"
        in: "path"
        description: "Id of underlay-topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyRef"
      - in: "body"
        name: "network.topology.networktopology.topology.UnderlayTopology.body-param"
        description: "network.topology.networktopology.topology.UnderlayTopology to\
          \ be added to list"
        required: true
        schema:
          $ref: "#/definitions/network.topology.networktopology.topology.UnderlayTopology"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyUnderlayTopologyBodyParam"
      responses:
        201:
          description: "Object created"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
        409:
          description: "Object already exists"
    put:
      tags:
      - "network-topology"
      description: "creates or updates network.topology.networktopology.topology.UnderlayTopology"
      operationId: "put_network-topology-network-topology_topology_underlay-topology"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "topology-ref"
        in: "path"
        description: "Id of underlay-topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyRef"
      - in: "body"
        name: "network.topology.networktopology.topology.UnderlayTopology.body-param"
        description: "network.topology.networktopology.topology.UnderlayTopology to\
          \ be added or updated"
        required: true
        schema:
          $ref: "network.topology.networktopology.topology.UnderlayTopology.request"
        x-exportParamName: "NetworkTopologyNetworktopologyTopologyUnderlayTopologyBodyParam"
      responses:
        200:
          description: "Object modified"
        201:
          description: "Object created"
        204:
          description: "Object modified"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
    delete:
      tags:
      - "network-topology"
      description: "removes network.topology.networktopology.topology.UnderlayTopology"
      operationId: "delete_network-topology-network-topology_topology_underlay-topology"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "topology-ref"
        in: "path"
        description: "Id of underlay-topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyRef"
      responses:
        204:
          description: "Object deleted"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
  /operational/network-topology:network-topology/:
    get:
      tags:
      - "network-topology"
      operationId: "oper_get_network-topology-network-topology"
      parameters: []
      responses:
        200:
          description: "network.topology.NetworkTopology"
          schema:
            type: "object"
            properties:
              network-topology:network-topology:
                $ref: "#/definitions/network.topology.NetworkTopology"
            title: "network.topology.NetworkTopology.response"
            description: "network.topology.NetworkTopology.response"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
  /operational/network-topology:network-topology/network-topology:topology/{topology-id}/:
    get:
      tags:
      - "network-topology"
      operationId: "oper_get_network-topology-network-topology_topology"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      responses:
        200:
          description: "network.topology.networktopology.Topology"
          schema:
            type: "object"
            properties:
              network-topology:topology:
                type: "array"
                items:
                  $ref: "#/definitions/network.topology.networktopology.Topology"
            title: "network.topology.networktopology.Topology.response"
            description: "network.topology.networktopology.Topology.response"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
  /operational/network-topology:network-topology/network-topology:topology/{topology-id}/network-topology:link/{link-id}/:
    get:
      tags:
      - "network-topology"
      operationId: "oper_get_network-topology-network-topology_topology_link"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "link-id"
        in: "path"
        description: "Id of link"
        required: true
        type: "string"
        x-exportParamName: "LinkId"
      responses:
        200:
          description: "network.topology.networktopology.topology.Link"
          schema:
            type: "object"
            properties:
              network-topology:link:
                type: "array"
                items:
                  $ref: "#/definitions/network.topology.networktopology.topology.Link"
            title: "network.topology.networktopology.topology.Link.response"
            description: "network.topology.networktopology.topology.Link.response"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
  /operational/network-topology:network-topology/network-topology:topology/{topology-id}/network-topology:node/{node-id}/:
    get:
      tags:
      - "network-topology"
      operationId: "oper_get_network-topology-network-topology_topology_node"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "node-id"
        in: "path"
        description: "Id of node"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      responses:
        200:
          description: "network.topology.networktopology.topology.Node"
          schema:
            type: "object"
            properties:
              network-topology:node:
                type: "array"
                items:
                  $ref: "#/definitions/network.topology.networktopology.topology.Node"
            title: "network.topology.networktopology.topology.Node.response"
            description: "network.topology.networktopology.topology.Node.response"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
  /operational/network-topology:network-topology/network-topology:topology/{topology-id}/network-topology:topology-types/:
    get:
      tags:
      - "network-topology"
      operationId: "oper_get_network-topology-network-topology_topology_topology-types"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      responses:
        200:
          description: "network.topology.networktopology.topology.TopologyTypes"
          schema:
            type: "object"
            properties:
              network-topology:topology-types:
                $ref: "#/definitions/network.topology.networktopology.topology.TopologyTypes"
            title: "network.topology.networktopology.topology.TopologyTypes.response"
            description: "network.topology.networktopology.topology.TopologyTypes.response"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
  ? /operational/network-topology:network-topology/network-topology:topology/{topology-id}/network-topology:underlay-topology/{topology-ref}/
  : get:
      tags:
      - "network-topology"
      operationId: "oper_get_network-topology-network-topology_topology_underlay-topology"
      parameters:
      - name: "topology-id"
        in: "path"
        description: "Id of topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyId"
      - name: "topology-ref"
        in: "path"
        description: "Id of underlay-topology"
        required: true
        type: "string"
        x-exportParamName: "TopologyRef"
      responses:
        200:
          description: "network.topology.networktopology.topology.UnderlayTopology"
          schema:
            type: "object"
            properties:
              network-topology:underlay-topology:
                type: "array"
                items:
                  $ref: "#/definitions/network.topology.networktopology.topology.UnderlayTopology"
            title: "network.topology.networktopology.topology.UnderlayTopology.response"
            description: "network.topology.networktopology.topology.UnderlayTopology.response"
        400:
          description: "Internal error"
        401:
          description: "Unauthorized"
  /operations/ietf-netconf-monitoring:get-schema/:
    post:
      tags:
      - "ietf-netconf-monitoring"
      operationId: "rpc_ietf-netconf-monitoring:get-schema/"
      parameters:
      - in: "body"
        name: "ietf.netconf.monitoring.getschema.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "ietf.netconf.monitoring.getschema.Input.bodyparam"
        x-exportParamName: "IetfNetconfMonitoringGetschemaInputBodyParam"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ietf.netconf.monitoring.GetSchema"
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:cancel-commit/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:cancel-commit/"
      parameters:
      - in: "body"
        name: "ietf.netconf.cancelcommit.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "ietf.netconf.cancelcommit.Input.bodyparam"
        x-exportParamName: "IetfNetconfCancelcommitInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:close-session/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:close-session/"
      parameters: []
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:commit/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:commit/"
      parameters:
      - in: "body"
        name: "ietf.netconf.commit.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "ietf.netconf.commit.Input.bodyparam"
        x-exportParamName: "IetfNetconfCommitInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:copy-config/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:copy-config/"
      parameters:
      - in: "body"
        name: "ietf.netconf.copyconfig.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "ietf.netconf.copyconfig.Input.bodyparam"
        x-exportParamName: "IetfNetconfCopyconfigInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:delete-config/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:delete-config/"
      parameters:
      - in: "body"
        name: "ietf.netconf.deleteconfig.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "ietf.netconf.deleteconfig.Input.bodyparam"
        x-exportParamName: "IetfNetconfDeleteconfigInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:discard-changes/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:discard-changes/"
      parameters: []
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:edit-config/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:edit-config/"
      parameters:
      - in: "body"
        name: "ietf.netconf.editconfig.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "ietf.netconf.editconfig.Input.bodyparam"
        x-exportParamName: "IetfNetconfEditconfigInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:get-config/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:get-config/"
      parameters:
      - in: "body"
        name: "ietf.netconf.getconfig.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "ietf.netconf.getconfig.Input.bodyparam"
        x-exportParamName: "IetfNetconfGetconfigInputBodyParam"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ietf.netconf.GetConfig"
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:get/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:get/"
      parameters:
      - in: "body"
        name: "ietf.netconf.get.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "ietf.netconf.get.Input.bodyparam"
        x-exportParamName: "IetfNetconfGetInputBodyParam"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ietf.netconf.Get"
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:kill-session/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:kill-session/"
      parameters:
      - in: "body"
        name: "ietf.netconf.killsession.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "ietf.netconf.killsession.Input.bodyparam"
        x-exportParamName: "IetfNetconfKillsessionInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:lock/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:lock/"
      parameters:
      - in: "body"
        name: "ietf.netconf.lock.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "ietf.netconf.lock.Input.bodyparam"
        x-exportParamName: "IetfNetconfLockInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:unlock/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:unlock/"
      parameters:
      - in: "body"
        name: "ietf.netconf.unlock.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "ietf.netconf.unlock.Input.bodyparam"
        x-exportParamName: "IetfNetconfUnlockInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/ietf-netconf:validate/:
    post:
      tags:
      - "ietf-netconf"
      operationId: "rpc_ietf-netconf:validate/"
      parameters:
      - in: "body"
        name: "ietf.netconf.validate.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "ietf.netconf.validate.Input.bodyparam"
        x-exportParamName: "IetfNetconfValidateInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/journal:clear-journal/:
    post:
      tags:
      - "journal"
      operationId: "rpc_journal:clear-journal/"
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/journal.ClearJournal"
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/journal:read-journal/:
    post:
      tags:
      - "journal"
      operationId: "rpc_journal:read-journal/"
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/journal.ReadJournal"
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/netconf-keystore:add-keystore-entry/:
    post:
      tags:
      - "netconf-keystore"
      operationId: "rpc_netconf-keystore:add-keystore-entry/"
      parameters:
      - in: "body"
        name: "netconf.keystore.addkeystoreentry.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "netconf.keystore.addkeystoreentry.Input.bodyparam"
        x-exportParamName: "NetconfKeystoreAddkeystoreentryInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/netconf-keystore:add-private-key/:
    post:
      tags:
      - "netconf-keystore"
      operationId: "rpc_netconf-keystore:add-private-key/"
      parameters:
      - in: "body"
        name: "netconf.keystore.addprivatekey.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "netconf.keystore.addprivatekey.Input.bodyparam"
        x-exportParamName: "NetconfKeystoreAddprivatekeyInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/netconf-keystore:add-trusted-certificate/:
    post:
      tags:
      - "netconf-keystore"
      operationId: "rpc_netconf-keystore:add-trusted-certificate/"
      parameters:
      - in: "body"
        name: "netconf.keystore.addtrustedcertificate.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "netconf.keystore.addtrustedcertificate.Input.bodyparam"
        x-exportParamName: "NetconfKeystoreAddtrustedcertificateInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/netconf-keystore:remove-keystore-entry/:
    post:
      tags:
      - "netconf-keystore"
      operationId: "rpc_netconf-keystore:remove-keystore-entry/"
      parameters:
      - in: "body"
        name: "netconf.keystore.removekeystoreentry.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "netconf.keystore.removekeystoreentry.Input.bodyparam"
        x-exportParamName: "NetconfKeystoreRemovekeystoreentryInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/netconf-keystore:remove-private-key/:
    post:
      tags:
      - "netconf-keystore"
      operationId: "rpc_netconf-keystore:remove-private-key/"
      parameters:
      - in: "body"
        name: "netconf.keystore.removeprivatekey.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "netconf.keystore.removeprivatekey.Input.bodyparam"
        x-exportParamName: "NetconfKeystoreRemoveprivatekeyInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/netconf-keystore:remove-trusted-certificate/:
    post:
      tags:
      - "netconf-keystore"
      operationId: "rpc_netconf-keystore:remove-trusted-certificate/"
      parameters:
      - in: "body"
        name: "netconf.keystore.removetrustedcertificate.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "netconf.keystore.removetrustedcertificate.Input.bodyparam"
        x-exportParamName: "NetconfKeystoreRemovetrustedcertificateInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/netconf-node-topology:create-device/:
    post:
      tags:
      - "netconf-node-topology"
      operationId: "rpc_netconf-node-topology:create-device/"
      parameters:
      - in: "body"
        name: "netconf.node.topology.createdevice.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "netconf.node.topology.createdevice.Input.bodyparam"
        x-exportParamName: "NetconfNodeTopologyCreatedeviceInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/netconf-node-topology:delete-device/:
    post:
      tags:
      - "netconf-node-topology"
      operationId: "rpc_netconf-node-topology:delete-device/"
      parameters:
      - in: "body"
        name: "netconf.node.topology.deletedevice.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "netconf.node.topology.deletedevice.Input.bodyparam"
        x-exportParamName: "NetconfNodeTopologyDeletedeviceInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
  /operations/notifications:create-subscription/:
    post:
      tags:
      - "notifications"
      operationId: "rpc_notifications:create-subscription/"
      parameters:
      - in: "body"
        name: "notifications.createsubscription.Input.body-param"
        description: ""
        required: true
        schema:
          $ref: "notifications.createsubscription.Input.bodyparam"
        x-exportParamName: "NotificationsCreatesubscriptionInputBodyParam"
      responses:
        201:
          description: "No response"
        400:
          description: "Internal error"
        401:
          description: "No response"
securityDefinitions:
  basicAuth:
    type: "basic"
definitions:
  cli.topology.ConnectionStatusEnumeration:
    type: "string"
    enum:
    - "connecting"
    - "connected"
    - "unable-to-connect"
  cli.topology.JournalLevel:
    type: "string"
    enum:
    - "command-only"
    - "extended"
  cli.topology.TransportTypeEnumeration:
    type: "string"
    enum:
    - "ssh"
    - "telnet"
  ietf.netconf.DefaultOperation:
    type: "string"
    enum:
    - "merge"
    - "replace"
    - "none"
  ietf.netconf.ErrorOption:
    type: "string"
    enum:
    - "stop-on-error"
    - "continue-on-error"
    - "rollback-on-error"
  ietf.netconf.Get:
    properties:
      output:
        $ref: "ietf.netconf.get.Output"
    description: "Optional[Retrieve running configuration and device state information.]\
      \ REF:Optional[RFC 6241, Section 7.7]"
    example:
      output:
        data: "data"
  ietf.netconf.GetConfig:
    properties:
      output:
        $ref: "ietf.netconf.getconfig.Output"
    description: "Optional[Retrieve all or part of a specified configuration.] REF:Optional[RFC\
      \ 6241, Section 7.1]"
    example:
      output:
        data: "data"
  ietf.netconf.TestOption:
    type: "string"
    enum:
    - "test-then-set"
    - "set"
    - "test-only"
  ietf.netconf.cancelcommit.Input:
    properties:
      persist-id:
        type: "string"
        description: "Optional[This parameter is given in order to cancel a persistent\n\
          confirmed commit.  The value must be equal to the value\ngiven in the 'persist'\
          \ parameter to the <commit> operation.\nIf it does not match, the operation\
          \ fails with an\n'invalid-value' error.] REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
  ietf.netconf.commit.Input:
    properties:
      persist:
        type: "string"
        description: "Optional[This parameter is used to make a confirmed commit\n\
          persistent.  A persistent confirmed commit is not aborted\nif the NETCONF\
          \ session terminates.  The only way to abort\na persistent confirmed commit\
          \ is to let the timer expire,\nor to use the <cancel-commit> operation.\n\
          \nThe value of this parameter is a token that must be given\nin the 'persist-id'\
          \ parameter of <commit> or\n<cancel-commit> operations in order to confirm\
          \ or cancel\nthe persistent confirmed commit.\n\nThe token should be a random\
          \ string.] REF:Optional[RFC 6241, Section 8.3.4.1]"
      confirmed:
        type: "string"
        description: "Optional[Requests a confirmed commit.] REF:Optional[RFC 6241,\
          \ Section 8.3.4.1]"
      confirm-timeout:
        type: "integer"
        format: "int64"
        description: "Optional[The timeout interval for a confirmed commit.] REF:Optional[RFC\
          \ 6241, Section 8.3.4.1]"
      persist-id:
        type: "string"
        description: "Optional[This parameter is given in order to commit a persistent\n\
          confirmed commit.  The value must be equal to the value\ngiven in the 'persist'\
          \ parameter to the <commit> operation.\nIf it does not match, the operation\
          \ fails with an\n'invalid-value' error.] REF:Optional[RFC 6241, Section\
          \ 8.3.4.1]"
    description: "Optional.empty REF:Optional.empty"
  ietf.netconf.copyconfig.Input:
    properties:
      source:
        $ref: "ietf.netconf.copyconfig.input.Source"
      target:
        $ref: "ietf.netconf.copyconfig.input.Target"
    description: "Optional.empty REF:Optional.empty"
  ietf.netconf.deleteconfig.Input:
    properties:
      target:
        $ref: "ietf.netconf.deleteconfig.input.Target"
    description: "Optional.empty REF:Optional.empty"
  ietf.netconf.editconfig.Input:
    properties:
      test-option:
        description: "Optional[The test option to use.] REF:Optional.empty"
        $ref: "#/definitions/ietf.netconf.TestOption"
      error-option:
        description: "Optional[The error option to use.] REF:Optional.empty"
        $ref: "#/definitions/ietf.netconf.ErrorOption"
      config:
        type: "string"
        description: "Optional[Inline Config content.] REF:Optional.empty"
        x-choice: "edit-content:config"
      default-operation:
        description: "Optional[The default operation to use.] REF:Optional.empty"
        $ref: "#/definitions/ietf.netconf.DefaultOperation"
      url:
        type: "string"
        description: "Optional[URL-based config content.] REF:Optional.empty"
        x-choice: "edit-content:url"
      target:
        $ref: "ietf.netconf.editconfig.input.Target"
    description: "Optional.empty REF:Optional.empty"
  ietf.netconf.get.Input:
    properties:
      filter:
        type: "string"
        description: "Optional[This parameter specifies the portion of the system\n\
          configuration and state data to retrieve.] REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
  ietf.netconf.getconfig.Input:
    properties:
      filter:
        type: "string"
        description: "Optional[Subtree or XPath filter to use.] REF:Optional.empty"
      source:
        $ref: "ietf.netconf.getconfig.input.Source"
    description: "Optional.empty REF:Optional.empty"
  ietf.netconf.killsession.Input:
    properties:
      session-id:
        type: "integer"
        format: "int64"
        description: "Optional[Particular session to kill.] REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
  ietf.netconf.lock.Input:
    properties:
      target:
        $ref: "ietf.netconf.lock.input.Target"
    description: "Optional.empty REF:Optional.empty"
  ietf.netconf.monitoring.FormatIdentityref:
    type: "string"
    enum:
    - "ietf-netconf-monitoring:rng"
    - "ietf-netconf-monitoring:rnc"
    - "ietf-netconf-monitoring:schema-format"
    - "ietf-netconf-monitoring:yin"
    - "ietf-netconf-monitoring:xsd"
    - "ietf-netconf-monitoring:yang"
  ietf.netconf.monitoring.GetSchema:
    properties:
      output:
        $ref: "ietf.netconf.monitoring.getschema.Output"
    description: "Optional[This operation is used to retrieve a schema from the\n\
      NETCONF server.\n\nPositive Response:\nThe NETCONF server returns the requested\
      \ schema.\n\nNegative Response:\nIf requested schema does not exist, the <error-tag>\
      \ is\n'invalid-value'.\n\nIf more than one schema matches the requested parameters,\
      \ the\n<error-tag> is 'operation-failed', and <error-app-tag> is\n'data-not-unique'.]\
      \ REF:Optional.empty"
    example:
      output:
        data: "data"
  ietf.netconf.monitoring.getschema.Input:
    properties:
      format:
        description: "Optional[The data modeling language of the schema.  If this\n\
          parameter is not present, and more than one formats of\nthe schema exists\
          \ on the server, a 'data-not-unique' error\nis returned, as described above.]\
          \ REF:Optional.empty"
        $ref: "#/definitions/ietf.netconf.monitoring.FormatIdentityref"
      identifier:
        type: "string"
        description: "Optional[Identifier for the schema list entry.] REF:Optional.empty"
      version:
        type: "string"
        description: "Optional[Version of the schema requested.  If this parameter\
          \ is not\npresent, and more than one version of the schema exists on\nthe\
          \ server, a 'data-not-unique' error is returned, as\ndescribed above.] REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
  ietf.netconf.unlock.Input:
    properties:
      target:
        $ref: "ietf.netconf.unlock.input.Target"
    description: "Optional.empty REF:Optional.empty"
  ietf.netconf.validate.Input:
    properties:
      source:
        $ref: "ietf.netconf.validate.input.Source"
    description: "Optional.empty REF:Optional.empty"
  journal.ClearJournal:
    properties:
      output:
        $ref: "journal.clearjournal.Output"
    description: "Optional.empty REF:Optional.empty"
    example:
      output:
        journal: "journal"
  journal.ReadJournal:
    properties:
      output:
        $ref: "journal.clearjournal.Output"
    description: "Optional.empty REF:Optional.empty"
    example:
      output:
        journal: "journal"
  netconf.keystore.addkeystoreentry.Input:
    properties:
      key-credential:
        type: "array"
        description: "Optional.empty REF:Optional.empty"
        items:
          $ref: "netconf.keystore.keystoreentry.KeyCredential"
    description: "Optional.empty REF:Optional.empty"
  netconf.keystore.addprivatekey.Input:
    properties:
      private-key:
        type: "array"
        description: "Optional[A private key.] REF:Optional.empty"
        items:
          $ref: "netconf.keystore.privatekeys.PrivateKey"
    description: "Optional.empty REF:Optional.empty"
  netconf.keystore.addtrustedcertificate.Input:
    properties:
      trusted-certificate:
        type: "array"
        description: "Optional[A list of trusted certificate. These cerfitifcates\
          \ can be used by a server to\nauthenticate clients, or by clients to authenticate\
          \ servers.] REF:Optional.empty"
        items:
          $ref: "netconf.keystore.trustedcertificates.TrustedCertificate"
    description: "Optional.empty REF:Optional.empty"
  netconf.keystore.removekeystoreentry.Input:
    properties:
      key-id:
        type: "array"
        description: "Optional.empty REF:Optional.empty"
        items:
          type: "string"
    description: "Optional.empty REF:Optional.empty"
  netconf.keystore.removeprivatekey.Input:
    properties:
      name:
        type: "array"
        description: "Optional.empty REF:Optional.empty"
        items:
          type: "string"
    description: "Optional.empty REF:Optional.empty"
  netconf.keystore.removetrustedcertificate.Input:
    properties:
      name:
        type: "array"
        description: "Optional.empty REF:Optional.empty"
        items:
          type: "string"
    description: "Optional.empty REF:Optional.empty"
  netconf.node.topology.CapabilityOriginEnumeration:
    type: "string"
    enum:
    - "user-defined"
    - "device-advertised"
  netconf.node.topology.ConnectionStatusEnumeration:
    type: "string"
    enum:
    - "connecting"
    - "connected"
    - "unable-to-connect"
  netconf.node.topology.FailureReasonEnumeration:
    type: "string"
    enum:
    - "missing-source"
    - "unable-to-resolve"
  netconf.node.topology.StatusEnumeration:
    type: "string"
    enum:
    - "connected"
    - "unavailable"
    - "failed"
  netconf.node.topology.createdevice.Input:
    properties:
      concurrent-rpc-limit:
        type: "integer"
        format: "int32"
        description: "Optional[Limit of concurrent messages that can be send before\
          \ reply messages are received.\nIf value <1 is provided, no limit will be\
          \ enforced] REF:Optional.empty"
      node-id:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      max-connection-attempts:
        type: "integer"
        format: "int64"
        description: "Optional[Maximum number of connection retries. Non positive\
          \ value or null is interpreted as infinity.] REF:Optional.empty"
      tcp-only:
        type: "boolean"
        description: "Optional.empty REF:Optional.empty"
      unavailable-capabilities:
        $ref: "netconf.node.topology.netconfnodeconnectionstatus.UnavailableCapabilities"
      reconnect-on-changed-schema:
        type: "boolean"
        description: "Optional[If true, the connector would auto disconnect/reconnect\
          \ when schemas are changed in the remote device.\nThe connector subscribes\
          \ (right after connect) to base netconf notifications and listens for netconf-capability-change\
          \ notification] REF:Optional.empty"
      dry-run-journal-size:
        type: "integer"
        format: "int32"
        description: "Optional[Size of the DRY RUN netconf mountpoint jounral. DRY\
          \ RUN journal captures netconf RPCs that\nwould be executed when reading/writing\
          \ some configuration. However the RPCs are not actually\nsent to the device]\
          \ REF:Optional.empty"
      non-module-capabilities:
        $ref: "netconf.node.topology.netconfnodeconnectionparameters.NonModuleCapabilities"
      yang-module-capabilities:
        $ref: "netconf.node.topology.netconfnodeconnectionparameters.YangModuleCapabilities"
      password:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
        x-choice: "credentials:login-password"
      sleep-factor:
        type: "integer"
        format: "int32"
        description: "Optional.empty REF:Optional.empty"
      host:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      odl-hello-message-capabilities:
        $ref: "netconf.node.topology.netconfnodeconnectionparameters.OdlHelloMessageCapabilities"
      clustered-connection-status:
        $ref: "netconf.node.topology.netconfnodeconnectionstatus.ClusteredConnectionStatus"
      yang-library:
        $ref: "netconf.node.topology.netconfschemastorage.YangLibrary"
      connection-status:
        description: "Optional.empty REF:Optional.empty"
        $ref: "#/definitions/netconf.node.topology.ConnectionStatusEnumeration"
      between-attempts-timeout-millis:
        type: "integer"
        format: "int32"
        description: "Optional[Initial timeout in milliseconds to wait between connection\
          \ attempts. Will be multiplied by sleep-factor with every additional attempt]\
          \ REF:Optional.empty"
      key-based:
        $ref: "netconf.node.topology.netconfnodecredentials.credentials.keyauth.KeyBased"
      keepalive-delay:
        type: "integer"
        format: "int64"
        description: "Optional[Netconf connector sends keepalive RPCs while the session\
          \ is idle, this delay specifies the delay between keepalive RPC in seconds\n\
          If a value <1 is provided, no keepalives will be sent] REF:Optional.empty"
      schemaless:
        type: "boolean"
        description: "Optional.empty REF:Optional.empty"
      default-request-timeout-millis:
        type: "integer"
        format: "int64"
        description: "Optional[Timeout for blocking operations within transactions.]\
          \ REF:Optional.empty"
      connection-timeout-millis:
        type: "integer"
        format: "int64"
        description: "Optional[Specifies timeout in milliseconds after which connection\
          \ must be established.] REF:Optional.empty"
      port:
        type: "integer"
        format: "int32"
        description: "Optional.empty REF:Optional.empty"
      available-capabilities:
        $ref: "netconf.node.topology.netconfnodeconnectionstatus.AvailableCapabilities"
      login-password-unencrypted:
        $ref: "netconf.node.topology.netconfnodecredentials.credentials.loginpwunencrypted.LoginPasswordUnencrypted"
      customization-factory:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      login-password:
        $ref: "netconf.node.topology.netconfnodecredentials.credentials.loginpwunencrypted.LoginPasswordUnencrypted"
      schema-cache-directory:
        type: "string"
        description: "Optional[The destination schema repository for yang files relative\
          \ to the cache directory.  This may be specified per netconf mount\nso that\
          \ the loaded yang files are stored to a distinct directory to avoid potential\
          \ conflict.] REF:Optional.empty"
      connected-message:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      actor-response-wait-time:
        type: "integer"
        format: "int32"
        description: "Optional[Time that slave actor will wait for response from master.]\
          \ REF:Optional.empty"
      pass-through:
        type: "object"
        description: "Optional[When the underlying node is connected, its NETCONF\
          \ context\nis available verbatim under this container through the\nmount\
          \ extension.] REF:Optional.empty"
        title: "netconf.node.topology.netconfnodeconnectionstatus.PassThrough"
        properties: {}
      username:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
        x-choice: "credentials:login-password"
    description: "Optional.empty REF:Optional.empty"
  netconf.node.topology.deletedevice.Input:
    properties:
      node-id:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
  network.topology.NetworkTopology:
    properties:
      topology:
        type: "array"
        description: "Optional[\nThis is the model of an abstract topology.\nA topology\
          \ contains nodes and links.\nEach topology MUST be identified by\nunique\
          \ topology-id for reason that a network could contain many\ntopologies.\n\
          ] REF:Optional.empty"
        items:
          $ref: "#/definitions/network.topology.networktopology.Topology"
    description: "Optional.empty REF:Optional.empty"
    example:
      topology:
      - node:
        - netconf-node-topology:sleep-factor: 0
          netconf-node-topology:default-request-timeout-millis: 6
          cli-topology:device-type: "cli-topology:device-type"
          netconf-node-topology:tcp-only: true
          cli-topology:connected-message: "cli-topology:connected-message"
          netconf-node-topology:port: 1
          password: "password"
          netconf-node-topology:unavailable-capabilities:
            unavailable-capability:
            - capability: "capability"
              failure-reason: {}
            - capability: "capability"
              failure-reason: {}
          netconf-node-topology:between-attempts-timeout-millis: 5
          netconf-node-topology:available-capabilities:
            available-capability:
            - capability: "capability"
              capability-origin: {}
            - capability: "capability"
              capability-origin: {}
          netconf-node-topology:max-connection-attempts: 5
          connection-lazy-timeout: 2
          cli-topology:connection-status: {}
          netconf-node-topology:concurrent-rpc-limit: 7
          connection-establish-timeout: 9
          cli-topology:default-commit-error-patterns:
            commit-error-pattern:
            - "commit-error-pattern"
            - "commit-error-pattern"
          keepalive-delay: 3
          login-password:
            password: "password"
            username: "username"
          netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
          cli-topology:port: 2
          netconf-node-topology:keepalive-delay: 4
          node-id: "node-id"
          netconf-node-topology:yang-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:yang-library:
            password: "password"
            yang-library-url: "yang-library-url"
            username: "username"
          netconf-node-topology:dry-run-journal-size: 7
          netconf-node-topology:odl-hello-message-capabilities:
            capability:
            - "capability"
            - "capability"
          secret: "secret"
          cli-topology:dry-run-journal-size: 1
          keepalive-initial-delay: 1
          supporting-node:
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          netconf-node-topology:connection-timeout-millis: 1
          keepalive-timeout: 6
          netconf-node-topology:connection-status: {}
          netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
          cli-topology:device-version: "cli-topology:device-version"
          netconf-node-topology:pass-through: "{}"
          netconf-node-topology:non-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:schemaless: true
          key-based:
            key-id: "key-id"
            username: "username"
          cli-topology:pass-through: "{}"
          cli-topology:host: "cli-topology:host"
          cli-topology:default-error-patterns:
            error-pattern:
            - "error-pattern"
            - "error-pattern"
          cli-topology:transport-type: {}
          cli-topology:journal-level: {}
          cli-topology:journal-size: 7
          termination-point:
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          netconf-node-topology:host: "netconf-node-topology:host"
          login-password-unencrypted:
            password: "password"
            username: "username"
          netconf-node-topology:clustered-connection-status:
            netconf-master-node: "netconf-master-node"
            node-status:
            - node: "node"
              status: {}
            - node: "node"
              status: {}
          netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
          command-timeout: 1
          netconf-node-topology:actor-response-wait-time: 4
          netconf-node-topology:reconnect-on-changed-schema: true
          cli-topology:available-capabilities:
            available-capability:
            - "available-capability"
            - "available-capability"
          username: "username"
        - netconf-node-topology:sleep-factor: 0
          netconf-node-topology:default-request-timeout-millis: 6
          cli-topology:device-type: "cli-topology:device-type"
          netconf-node-topology:tcp-only: true
          cli-topology:connected-message: "cli-topology:connected-message"
          netconf-node-topology:port: 1
          password: "password"
          netconf-node-topology:unavailable-capabilities:
            unavailable-capability:
            - capability: "capability"
              failure-reason: {}
            - capability: "capability"
              failure-reason: {}
          netconf-node-topology:between-attempts-timeout-millis: 5
          netconf-node-topology:available-capabilities:
            available-capability:
            - capability: "capability"
              capability-origin: {}
            - capability: "capability"
              capability-origin: {}
          netconf-node-topology:max-connection-attempts: 5
          connection-lazy-timeout: 2
          cli-topology:connection-status: {}
          netconf-node-topology:concurrent-rpc-limit: 7
          connection-establish-timeout: 9
          cli-topology:default-commit-error-patterns:
            commit-error-pattern:
            - "commit-error-pattern"
            - "commit-error-pattern"
          keepalive-delay: 3
          login-password:
            password: "password"
            username: "username"
          netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
          cli-topology:port: 2
          netconf-node-topology:keepalive-delay: 4
          node-id: "node-id"
          netconf-node-topology:yang-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:yang-library:
            password: "password"
            yang-library-url: "yang-library-url"
            username: "username"
          netconf-node-topology:dry-run-journal-size: 7
          netconf-node-topology:odl-hello-message-capabilities:
            capability:
            - "capability"
            - "capability"
          secret: "secret"
          cli-topology:dry-run-journal-size: 1
          keepalive-initial-delay: 1
          supporting-node:
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          netconf-node-topology:connection-timeout-millis: 1
          keepalive-timeout: 6
          netconf-node-topology:connection-status: {}
          netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
          cli-topology:device-version: "cli-topology:device-version"
          netconf-node-topology:pass-through: "{}"
          netconf-node-topology:non-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:schemaless: true
          key-based:
            key-id: "key-id"
            username: "username"
          cli-topology:pass-through: "{}"
          cli-topology:host: "cli-topology:host"
          cli-topology:default-error-patterns:
            error-pattern:
            - "error-pattern"
            - "error-pattern"
          cli-topology:transport-type: {}
          cli-topology:journal-level: {}
          cli-topology:journal-size: 7
          termination-point:
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          netconf-node-topology:host: "netconf-node-topology:host"
          login-password-unencrypted:
            password: "password"
            username: "username"
          netconf-node-topology:clustered-connection-status:
            netconf-master-node: "netconf-master-node"
            node-status:
            - node: "node"
              status: {}
            - node: "node"
              status: {}
          netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
          command-timeout: 1
          netconf-node-topology:actor-response-wait-time: 4
          netconf-node-topology:reconnect-on-changed-schema: true
          cli-topology:available-capabilities:
            available-capability:
            - "available-capability"
            - "available-capability"
          username: "username"
        topology-types:
          netconf-node-topology:topology-netconf: "{}"
        topology-id: "topology-id"
        link:
        - link-id: "link-id"
          supporting-link:
          - link-ref: "link-ref"
          - link-ref: "link-ref"
          destination:
            dest-node: "dest-node"
            dest-tp: "dest-tp"
          source:
            source-node: "source-node"
            source-tp: "source-tp"
        - link-id: "link-id"
          supporting-link:
          - link-ref: "link-ref"
          - link-ref: "link-ref"
          destination:
            dest-node: "dest-node"
            dest-tp: "dest-tp"
          source:
            source-node: "source-node"
            source-tp: "source-tp"
        server-provided: true
        underlay-topology:
        - topology-ref: "topology-ref"
        - topology-ref: "topology-ref"
      - node:
        - netconf-node-topology:sleep-factor: 0
          netconf-node-topology:default-request-timeout-millis: 6
          cli-topology:device-type: "cli-topology:device-type"
          netconf-node-topology:tcp-only: true
          cli-topology:connected-message: "cli-topology:connected-message"
          netconf-node-topology:port: 1
          password: "password"
          netconf-node-topology:unavailable-capabilities:
            unavailable-capability:
            - capability: "capability"
              failure-reason: {}
            - capability: "capability"
              failure-reason: {}
          netconf-node-topology:between-attempts-timeout-millis: 5
          netconf-node-topology:available-capabilities:
            available-capability:
            - capability: "capability"
              capability-origin: {}
            - capability: "capability"
              capability-origin: {}
          netconf-node-topology:max-connection-attempts: 5
          connection-lazy-timeout: 2
          cli-topology:connection-status: {}
          netconf-node-topology:concurrent-rpc-limit: 7
          connection-establish-timeout: 9
          cli-topology:default-commit-error-patterns:
            commit-error-pattern:
            - "commit-error-pattern"
            - "commit-error-pattern"
          keepalive-delay: 3
          login-password:
            password: "password"
            username: "username"
          netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
          cli-topology:port: 2
          netconf-node-topology:keepalive-delay: 4
          node-id: "node-id"
          netconf-node-topology:yang-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:yang-library:
            password: "password"
            yang-library-url: "yang-library-url"
            username: "username"
          netconf-node-topology:dry-run-journal-size: 7
          netconf-node-topology:odl-hello-message-capabilities:
            capability:
            - "capability"
            - "capability"
          secret: "secret"
          cli-topology:dry-run-journal-size: 1
          keepalive-initial-delay: 1
          supporting-node:
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          netconf-node-topology:connection-timeout-millis: 1
          keepalive-timeout: 6
          netconf-node-topology:connection-status: {}
          netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
          cli-topology:device-version: "cli-topology:device-version"
          netconf-node-topology:pass-through: "{}"
          netconf-node-topology:non-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:schemaless: true
          key-based:
            key-id: "key-id"
            username: "username"
          cli-topology:pass-through: "{}"
          cli-topology:host: "cli-topology:host"
          cli-topology:default-error-patterns:
            error-pattern:
            - "error-pattern"
            - "error-pattern"
          cli-topology:transport-type: {}
          cli-topology:journal-level: {}
          cli-topology:journal-size: 7
          termination-point:
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          netconf-node-topology:host: "netconf-node-topology:host"
          login-password-unencrypted:
            password: "password"
            username: "username"
          netconf-node-topology:clustered-connection-status:
            netconf-master-node: "netconf-master-node"
            node-status:
            - node: "node"
              status: {}
            - node: "node"
              status: {}
          netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
          command-timeout: 1
          netconf-node-topology:actor-response-wait-time: 4
          netconf-node-topology:reconnect-on-changed-schema: true
          cli-topology:available-capabilities:
            available-capability:
            - "available-capability"
            - "available-capability"
          username: "username"
        - netconf-node-topology:sleep-factor: 0
          netconf-node-topology:default-request-timeout-millis: 6
          cli-topology:device-type: "cli-topology:device-type"
          netconf-node-topology:tcp-only: true
          cli-topology:connected-message: "cli-topology:connected-message"
          netconf-node-topology:port: 1
          password: "password"
          netconf-node-topology:unavailable-capabilities:
            unavailable-capability:
            - capability: "capability"
              failure-reason: {}
            - capability: "capability"
              failure-reason: {}
          netconf-node-topology:between-attempts-timeout-millis: 5
          netconf-node-topology:available-capabilities:
            available-capability:
            - capability: "capability"
              capability-origin: {}
            - capability: "capability"
              capability-origin: {}
          netconf-node-topology:max-connection-attempts: 5
          connection-lazy-timeout: 2
          cli-topology:connection-status: {}
          netconf-node-topology:concurrent-rpc-limit: 7
          connection-establish-timeout: 9
          cli-topology:default-commit-error-patterns:
            commit-error-pattern:
            - "commit-error-pattern"
            - "commit-error-pattern"
          keepalive-delay: 3
          login-password:
            password: "password"
            username: "username"
          netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
          cli-topology:port: 2
          netconf-node-topology:keepalive-delay: 4
          node-id: "node-id"
          netconf-node-topology:yang-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:yang-library:
            password: "password"
            yang-library-url: "yang-library-url"
            username: "username"
          netconf-node-topology:dry-run-journal-size: 7
          netconf-node-topology:odl-hello-message-capabilities:
            capability:
            - "capability"
            - "capability"
          secret: "secret"
          cli-topology:dry-run-journal-size: 1
          keepalive-initial-delay: 1
          supporting-node:
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          netconf-node-topology:connection-timeout-millis: 1
          keepalive-timeout: 6
          netconf-node-topology:connection-status: {}
          netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
          cli-topology:device-version: "cli-topology:device-version"
          netconf-node-topology:pass-through: "{}"
          netconf-node-topology:non-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:schemaless: true
          key-based:
            key-id: "key-id"
            username: "username"
          cli-topology:pass-through: "{}"
          cli-topology:host: "cli-topology:host"
          cli-topology:default-error-patterns:
            error-pattern:
            - "error-pattern"
            - "error-pattern"
          cli-topology:transport-type: {}
          cli-topology:journal-level: {}
          cli-topology:journal-size: 7
          termination-point:
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          netconf-node-topology:host: "netconf-node-topology:host"
          login-password-unencrypted:
            password: "password"
            username: "username"
          netconf-node-topology:clustered-connection-status:
            netconf-master-node: "netconf-master-node"
            node-status:
            - node: "node"
              status: {}
            - node: "node"
              status: {}
          netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
          command-timeout: 1
          netconf-node-topology:actor-response-wait-time: 4
          netconf-node-topology:reconnect-on-changed-schema: true
          cli-topology:available-capabilities:
            available-capability:
            - "available-capability"
            - "available-capability"
          username: "username"
        topology-types:
          netconf-node-topology:topology-netconf: "{}"
        topology-id: "topology-id"
        link:
        - link-id: "link-id"
          supporting-link:
          - link-ref: "link-ref"
          - link-ref: "link-ref"
          destination:
            dest-node: "dest-node"
            dest-tp: "dest-tp"
          source:
            source-node: "source-node"
            source-tp: "source-tp"
        - link-id: "link-id"
          supporting-link:
          - link-ref: "link-ref"
          - link-ref: "link-ref"
          destination:
            dest-node: "dest-node"
            dest-tp: "dest-tp"
          source:
            source-node: "source-node"
            source-tp: "source-tp"
        server-provided: true
        underlay-topology:
        - topology-ref: "topology-ref"
        - topology-ref: "topology-ref"
  network.topology.networktopology.Topology:
    properties:
      node:
        type: "array"
        description: "Optional[The list of network nodes defined for the topology.]\
          \ REF:Optional.empty"
        items:
          $ref: "#/definitions/network.topology.networktopology.topology.Node"
      topology-types:
        description: "Optional[This container is used to identify the type, or types\n\
          (as a topology can support several types simultaneously),\nof the topology.\n\
          Topology types are the subject of several integrity constraints\nthat an\
          \ implementing server can validate in order to\nmaintain integrity of the\
          \ datastore.\nTopology types are indicated through separate data nodes;\n\
          the set of topology types is expected to increase over time.\nTo add support\
          \ for a new topology, an augmenting module\nneeds to augment this container\
          \ with a new empty optional\ncontainer to indicate the new topology type.\n\
          The use of a container allows to indicate a subcategorization\nof topology\
          \ types.\nThe container SHALL NOT be augmented with any data nodes\nthat\
          \ serve a purpose other than identifying a particular\ntopology type.\n\
          ] REF:Optional.empty"
        $ref: "#/definitions/network.topology.networktopology.topology.TopologyTypes"
      topology-id:
        type: "string"
        description: "Optional[\nIt is presumed that a datastore will contain many\
          \ topologies. To\ndistinguish between topologies it is vital to have UNIQUE\n\
          topology identifiers.\n] REF:Optional.empty"
      link:
        type: "array"
        description: "Optional[\nA Network Link connects a by Local (Source) node\
          \ and\na Remote (Destination) Network Nodes via a set of the\nnodes' termination\
          \ points.\nAs it is possible to have several links between the same\nsource\
          \ and destination nodes, and as a link could potentially\nbe re-homed between\
          \ termination points, to ensure that we\nwould always know to distinguish\
          \ between links, every link\nis identified by a dedicated link identifier.\n\
          Note that a link models a point-to-point link, not a multipoint\nlink.\n\
          Layering dependencies on links in underlay topologies are\nnot represented\
          \ as the layering information of nodes and of\ntermination points is sufficient.\n\
          ] REF:Optional.empty"
        items:
          $ref: "#/definitions/network.topology.networktopology.topology.Link"
      server-provided:
        type: "boolean"
        description: "Optional[\nIndicates whether the topology is configurable by\
          \ clients,\nor whether it is provided by the server.  This leaf is\n\npopulated\
          \ by the server implementing the model.\nIt is set to false for topologies\
          \ that are created by a client;\nit is set to true otherwise.  If it is\
          \ set to true, any\nattempt to edit the topology MUST be rejected.\n] REF:Optional.empty"
      underlay-topology:
        type: "array"
        description: "Optional[Identifies the topology, or topologies, that this topology\n\
          is dependent on.] REF:Optional.empty"
        items:
          $ref: "#/definitions/network.topology.networktopology.topology.UnderlayTopology"
    description: "Optional[\nThis is the model of an abstract topology.\nA topology\
      \ contains nodes and links.\nEach topology MUST be identified by\nunique topology-id\
      \ for reason that a network could contain many\ntopologies.\n] REF:Optional.empty"
    example:
      node:
      - netconf-node-topology:sleep-factor: 0
        netconf-node-topology:default-request-timeout-millis: 6
        cli-topology:device-type: "cli-topology:device-type"
        netconf-node-topology:tcp-only: true
        cli-topology:connected-message: "cli-topology:connected-message"
        netconf-node-topology:port: 1
        password: "password"
        netconf-node-topology:unavailable-capabilities:
          unavailable-capability:
          - capability: "capability"
            failure-reason: {}
          - capability: "capability"
            failure-reason: {}
        netconf-node-topology:between-attempts-timeout-millis: 5
        netconf-node-topology:available-capabilities:
          available-capability:
          - capability: "capability"
            capability-origin: {}
          - capability: "capability"
            capability-origin: {}
        netconf-node-topology:max-connection-attempts: 5
        connection-lazy-timeout: 2
        cli-topology:connection-status: {}
        netconf-node-topology:concurrent-rpc-limit: 7
        connection-establish-timeout: 9
        cli-topology:default-commit-error-patterns:
          commit-error-pattern:
          - "commit-error-pattern"
          - "commit-error-pattern"
        keepalive-delay: 3
        login-password:
          password: "password"
          username: "username"
        netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
        cli-topology:port: 2
        netconf-node-topology:keepalive-delay: 4
        node-id: "node-id"
        netconf-node-topology:yang-module-capabilities:
          capability:
          - "capability"
          - "capability"
          override: true
        netconf-node-topology:yang-library:
          password: "password"
          yang-library-url: "yang-library-url"
          username: "username"
        netconf-node-topology:dry-run-journal-size: 7
        netconf-node-topology:odl-hello-message-capabilities:
          capability:
          - "capability"
          - "capability"
        secret: "secret"
        cli-topology:dry-run-journal-size: 1
        keepalive-initial-delay: 1
        supporting-node:
        - node-ref: "node-ref"
          topology-ref: "topology-ref"
        - node-ref: "node-ref"
          topology-ref: "topology-ref"
        netconf-node-topology:connection-timeout-millis: 1
        keepalive-timeout: 6
        netconf-node-topology:connection-status: {}
        netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
        cli-topology:device-version: "cli-topology:device-version"
        netconf-node-topology:pass-through: "{}"
        netconf-node-topology:non-module-capabilities:
          capability:
          - "capability"
          - "capability"
          override: true
        netconf-node-topology:schemaless: true
        key-based:
          key-id: "key-id"
          username: "username"
        cli-topology:pass-through: "{}"
        cli-topology:host: "cli-topology:host"
        cli-topology:default-error-patterns:
          error-pattern:
          - "error-pattern"
          - "error-pattern"
        cli-topology:transport-type: {}
        cli-topology:journal-level: {}
        cli-topology:journal-size: 7
        termination-point:
        - tp-ref:
          - "tp-ref"
          - "tp-ref"
          tp-id: "tp-id"
        - tp-ref:
          - "tp-ref"
          - "tp-ref"
          tp-id: "tp-id"
        netconf-node-topology:host: "netconf-node-topology:host"
        login-password-unencrypted:
          password: "password"
          username: "username"
        netconf-node-topology:clustered-connection-status:
          netconf-master-node: "netconf-master-node"
          node-status:
          - node: "node"
            status: {}
          - node: "node"
            status: {}
        netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
        command-timeout: 1
        netconf-node-topology:actor-response-wait-time: 4
        netconf-node-topology:reconnect-on-changed-schema: true
        cli-topology:available-capabilities:
          available-capability:
          - "available-capability"
          - "available-capability"
        username: "username"
      - netconf-node-topology:sleep-factor: 0
        netconf-node-topology:default-request-timeout-millis: 6
        cli-topology:device-type: "cli-topology:device-type"
        netconf-node-topology:tcp-only: true
        cli-topology:connected-message: "cli-topology:connected-message"
        netconf-node-topology:port: 1
        password: "password"
        netconf-node-topology:unavailable-capabilities:
          unavailable-capability:
          - capability: "capability"
            failure-reason: {}
          - capability: "capability"
            failure-reason: {}
        netconf-node-topology:between-attempts-timeout-millis: 5
        netconf-node-topology:available-capabilities:
          available-capability:
          - capability: "capability"
            capability-origin: {}
          - capability: "capability"
            capability-origin: {}
        netconf-node-topology:max-connection-attempts: 5
        connection-lazy-timeout: 2
        cli-topology:connection-status: {}
        netconf-node-topology:concurrent-rpc-limit: 7
        connection-establish-timeout: 9
        cli-topology:default-commit-error-patterns:
          commit-error-pattern:
          - "commit-error-pattern"
          - "commit-error-pattern"
        keepalive-delay: 3
        login-password:
          password: "password"
          username: "username"
        netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
        cli-topology:port: 2
        netconf-node-topology:keepalive-delay: 4
        node-id: "node-id"
        netconf-node-topology:yang-module-capabilities:
          capability:
          - "capability"
          - "capability"
          override: true
        netconf-node-topology:yang-library:
          password: "password"
          yang-library-url: "yang-library-url"
          username: "username"
        netconf-node-topology:dry-run-journal-size: 7
        netconf-node-topology:odl-hello-message-capabilities:
          capability:
          - "capability"
          - "capability"
        secret: "secret"
        cli-topology:dry-run-journal-size: 1
        keepalive-initial-delay: 1
        supporting-node:
        - node-ref: "node-ref"
          topology-ref: "topology-ref"
        - node-ref: "node-ref"
          topology-ref: "topology-ref"
        netconf-node-topology:connection-timeout-millis: 1
        keepalive-timeout: 6
        netconf-node-topology:connection-status: {}
        netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
        cli-topology:device-version: "cli-topology:device-version"
        netconf-node-topology:pass-through: "{}"
        netconf-node-topology:non-module-capabilities:
          capability:
          - "capability"
          - "capability"
          override: true
        netconf-node-topology:schemaless: true
        key-based:
          key-id: "key-id"
          username: "username"
        cli-topology:pass-through: "{}"
        cli-topology:host: "cli-topology:host"
        cli-topology:default-error-patterns:
          error-pattern:
          - "error-pattern"
          - "error-pattern"
        cli-topology:transport-type: {}
        cli-topology:journal-level: {}
        cli-topology:journal-size: 7
        termination-point:
        - tp-ref:
          - "tp-ref"
          - "tp-ref"
          tp-id: "tp-id"
        - tp-ref:
          - "tp-ref"
          - "tp-ref"
          tp-id: "tp-id"
        netconf-node-topology:host: "netconf-node-topology:host"
        login-password-unencrypted:
          password: "password"
          username: "username"
        netconf-node-topology:clustered-connection-status:
          netconf-master-node: "netconf-master-node"
          node-status:
          - node: "node"
            status: {}
          - node: "node"
            status: {}
        netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
        command-timeout: 1
        netconf-node-topology:actor-response-wait-time: 4
        netconf-node-topology:reconnect-on-changed-schema: true
        cli-topology:available-capabilities:
          available-capability:
          - "available-capability"
          - "available-capability"
        username: "username"
      topology-types:
        netconf-node-topology:topology-netconf: "{}"
      topology-id: "topology-id"
      link:
      - link-id: "link-id"
        supporting-link:
        - link-ref: "link-ref"
        - link-ref: "link-ref"
        destination:
          dest-node: "dest-node"
          dest-tp: "dest-tp"
        source:
          source-node: "source-node"
          source-tp: "source-tp"
      - link-id: "link-id"
        supporting-link:
        - link-ref: "link-ref"
        - link-ref: "link-ref"
        destination:
          dest-node: "dest-node"
          dest-tp: "dest-tp"
        source:
          source-node: "source-node"
          source-tp: "source-tp"
      server-provided: true
      underlay-topology:
      - topology-ref: "topology-ref"
      - topology-ref: "topology-ref"
  network.topology.networktopology.topology.Link:
    properties:
      destination:
        $ref: "network.topology.linkattributes.Destination"
      link-id:
        type: "string"
        description: "Optional[The identifier of a link in the topology.\nA link is\
          \ specific to a topology to which it belongs.] REF:Optional.empty"
      source:
        $ref: "network.topology.linkattributes.Source"
      supporting-link:
        type: "array"
        description: "Optional.empty REF:Optional.empty"
        items:
          $ref: "network.topology.linkattributes.SupportingLink"
    description: "Optional[\nA Network Link connects a by Local (Source) node and\n\
      a Remote (Destination) Network Nodes via a set of the\nnodes' termination points.\n\
      As it is possible to have several links between the same\nsource and destination\
      \ nodes, and as a link could potentially\nbe re-homed between termination points,\
      \ to ensure that we\nwould always know to distinguish between links, every link\n\
      is identified by a dedicated link identifier.\nNote that a link models a point-to-point\
      \ link, not a multipoint\nlink.\nLayering dependencies on links in underlay\
      \ topologies are\nnot represented as the layering information of nodes and of\n\
      termination points is sufficient.\n] REF:Optional.empty"
    example:
      link-id: "link-id"
      supporting-link:
      - link-ref: "link-ref"
      - link-ref: "link-ref"
      destination:
        dest-node: "dest-node"
        dest-tp: "dest-tp"
      source:
        source-node: "source-node"
        source-tp: "source-tp"
  network.topology.networktopology.topology.Node:
    properties:
      netconf-node-topology:sleep-factor:
        type: "integer"
        format: "int32"
        description: "Optional.empty REF:Optional.empty"
      netconf-node-topology:default-request-timeout-millis:
        type: "integer"
        format: "int64"
        description: "Optional[Timeout for blocking operations within transactions.]\
          \ REF:Optional.empty"
      cli-topology:device-type:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      netconf-node-topology:tcp-only:
        type: "boolean"
        description: "Optional.empty REF:Optional.empty"
      cli-topology:connected-message:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      netconf-node-topology:port:
        type: "integer"
        format: "int32"
        description: "Optional.empty REF:Optional.empty"
      password:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
        x-choice: "credentials:login-password"
      netconf-node-topology:unavailable-capabilities:
        $ref: "netconf.node.topology.netconfnodeconnectionstatus.UnavailableCapabilities"
      netconf-node-topology:between-attempts-timeout-millis:
        type: "integer"
        format: "int32"
        description: "Optional[Initial timeout in milliseconds to wait between connection\
          \ attempts. Will be multiplied by sleep-factor with every additional attempt]\
          \ REF:Optional.empty"
      netconf-node-topology:available-capabilities:
        $ref: "netconf.node.topology.netconfnodeconnectionstatus.AvailableCapabilities"
      netconf-node-topology:max-connection-attempts:
        type: "integer"
        format: "int64"
        description: "Optional[Maximum number of connection retries. Non positive\
          \ value or null is interpreted as infinity.] REF:Optional.empty"
      connection-lazy-timeout:
        type: "integer"
        format: "int32"
        description: "Optional[Maximal time (in seconds) for connection to keep alive,\
          \ if no activity was detected\nin the session and the timeout has been reached,\
          \ connection will be stopped] REF:Optional.empty"
        x-choice: "keepalive-strategy:lazy"
      cli-topology:connection-status:
        description: "Optional.empty REF:Optional.empty"
        $ref: "#/definitions/cli.topology.ConnectionStatusEnumeration"
      netconf-node-topology:concurrent-rpc-limit:
        type: "integer"
        format: "int32"
        description: "Optional[Limit of concurrent messages that can be send before\
          \ reply messages are received.\nIf value <1 is provided, no limit will be\
          \ enforced] REF:Optional.empty"
      connection-establish-timeout:
        type: "integer"
        format: "int32"
        description: "Optional[Maximal time (in seconds) for connection establishment,\
          \ if a connection attempt does\nnot succeed in this time, the attempt is\
          \ considered a failure] REF:Optional.empty"
        x-choice: "keepalive-strategy:lazy"
      cli-topology:default-commit-error-patterns:
        $ref: "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns"
      keepalive-delay:
        type: "integer"
        format: "int32"
        description: "Optional.empty REF:Optional.empty"
        x-choice: "keepalive-strategy:keepalive"
      login-password:
        $ref: "netconf.node.topology.netconfnodecredentials.credentials.loginpwunencrypted.LoginPasswordUnencrypted"
      netconf-node-topology:connected-message:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      cli-topology:port:
        type: "integer"
        format: "int32"
        description: "Optional.empty REF:Optional.empty"
      netconf-node-topology:keepalive-delay:
        type: "integer"
        format: "int64"
        description: "Optional[Netconf connector sends keepalive RPCs while the session\
          \ is idle, this delay specifies the delay between keepalive RPC in seconds\n\
          If a value <1 is provided, no keepalives will be sent] REF:Optional.empty"
      node-id:
        type: "string"
        description: "Optional[The identifier of a node in the topology.\nA node is\
          \ specific to a topology to which it belongs.] REF:Optional.empty"
      netconf-node-topology:yang-module-capabilities:
        $ref: "netconf.node.topology.netconfnodeconnectionparameters.YangModuleCapabilities"
      netconf-node-topology:yang-library:
        $ref: "netconf.node.topology.netconfschemastorage.YangLibrary"
      netconf-node-topology:dry-run-journal-size:
        type: "integer"
        format: "int32"
        description: "Optional[Size of the DRY RUN netconf mountpoint jounral. DRY\
          \ RUN journal captures netconf RPCs that\nwould be executed when reading/writing\
          \ some configuration. However the RPCs are not actually\nsent to the device]\
          \ REF:Optional.empty"
      netconf-node-topology:odl-hello-message-capabilities:
        $ref: "netconf.node.topology.netconfnodeconnectionparameters.OdlHelloMessageCapabilities"
      secret:
        type: "string"
        description: "Optional[Privileged EXEC mode password for Cisco IOS devices.\
          \ If not set credentials\npassword will be used] REF:Optional.empty"
        x-choice: "privileged-mode-credentials:ios-enable-password"
      cli-topology:dry-run-journal-size:
        type: "integer"
        format: "int32"
        description: "Optional[Size of the DRY RUN cli mountpoint jounral. DRY RUN\
          \ journal captures commands that would be\nexecuted when reading/writing\
          \ some configuration. However the commands are not actually sent\nto the\
          \ device] REF:Optional.empty"
      keepalive-initial-delay:
        type: "integer"
        format: "int32"
        description: "Optional.empty REF:Optional.empty"
        x-choice: "keepalive-strategy:keepalive"
      supporting-node:
        type: "array"
        description: "Optional[This list defines vertical layering information for\
          \ nodes.\nIt allows to capture for any given node, which node (or nodes)\n\
          in the corresponding underlay topology it maps onto.\nA node can map to\
          \ zero, one, or more nodes below it;\naccordingly there can be zero, one,\
          \ or more elements in the list.\nIf there are specific layering requirements,\
          \ for example\nspecific to a particular type of topology that only allows\n\
          for certain layering relationships, the choice\nbelow can be augmented with\
          \ additional cases.\nA list has been chosen rather than a leaf-list in order\n\
          to provide room for augmentations, e.g. for\nstatistics or priorization\
          \ information associated with\nsupporting nodes.] REF:Optional.empty"
        items:
          $ref: "network.topology.nodeattributes.SupportingNode"
      netconf-node-topology:connection-timeout-millis:
        type: "integer"
        format: "int64"
        description: "Optional[Specifies timeout in milliseconds after which connection\
          \ must be established.] REF:Optional.empty"
      keepalive-timeout:
        type: "integer"
        format: "int32"
        description: "Optional.empty REF:Optional.empty"
        x-choice: "keepalive-strategy:keepalive"
      netconf-node-topology:connection-status:
        description: "Optional.empty REF:Optional.empty"
        $ref: "#/definitions/netconf.node.topology.ConnectionStatusEnumeration"
      netconf-node-topology:schema-cache-directory:
        type: "string"
        description: "Optional[The destination schema repository for yang files relative\
          \ to the cache directory.  This may be specified per netconf mount\nso that\
          \ the loaded yang files are stored to a distinct directory to avoid potential\
          \ conflict.] REF:Optional.empty"
      cli-topology:device-version:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      netconf-node-topology:pass-through:
        type: "object"
        description: "Optional[When the underlying node is connected, its NETCONF\
          \ context\nis available verbatim under this container through the\nmount\
          \ extension.] REF:Optional.empty"
        title: "netconf.node.topology.netconfnodeconnectionstatus.PassThrough"
        properties: {}
      netconf-node-topology:non-module-capabilities:
        $ref: "netconf.node.topology.netconfnodeconnectionparameters.NonModuleCapabilities"
      netconf-node-topology:schemaless:
        type: "boolean"
        description: "Optional.empty REF:Optional.empty"
      key-based:
        $ref: "netconf.node.topology.netconfnodecredentials.credentials.keyauth.KeyBased"
      cli-topology:pass-through:
        type: "object"
        description: "Optional[When the underlying node is connected, its cli context\n\
          is available verbatim under this container through the\nmount extension.]\
          \ REF:Optional.empty"
        title: "cli.topology.clinodeconnectionstatus.PassThrough"
        properties: {}
      cli-topology:host:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      cli-topology:default-error-patterns:
        $ref: "cli.translate.registry.errorpatterns.DefaultErrorPatterns"
      cli-topology:transport-type:
        description: "Optional.empty REF:Optional.empty"
        $ref: "#/definitions/cli.topology.TransportTypeEnumeration"
      cli-topology:journal-level:
        description: "Optional[Sets how much information should be stored in the journal.\
          \ Command-only stores only the actual\ncommands executed on device. Extended\
          \ records additional information such as: transaction\nlife-cycle, which\
          \ handlers were invoked etc.] REF:Optional.empty"
        $ref: "#/definitions/cli.topology.JournalLevel"
      cli-topology:journal-size:
        type: "integer"
        format: "int32"
        description: "Optional[Size of the cli mountpoint jounral. Journal keeps track\
          \ of executed commands and makes\nthem available for users/apps for debugging\
          \ purposes. Value 0 disables journaling] REF:Optional.empty"
      termination-point:
        type: "array"
        description: "Optional[A termination point can terminate a link.\nDepending\
          \ on the type of topology, a termination point could,\nfor example, refer\
          \ to a port or an interface.] REF:Optional.empty"
        items:
          $ref: "network.topology.networktopology.topology.node.TerminationPoint"
      netconf-node-topology:host:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      login-password-unencrypted:
        $ref: "netconf.node.topology.netconfnodecredentials.credentials.loginpwunencrypted.LoginPasswordUnencrypted"
      netconf-node-topology:clustered-connection-status:
        $ref: "netconf.node.topology.netconfnodeconnectionstatus.ClusteredConnectionStatus"
      netconf-node-topology:customization-factory:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      command-timeout:
        type: "integer"
        format: "int32"
        description: "Optional[Maximal time (in seconds) for command execution, if\
          \ a command cannot be executed on\na device in this time, the execution\
          \ is considered a failure] REF:Optional.empty"
        x-choice: "keepalive-strategy:lazy"
      netconf-node-topology:actor-response-wait-time:
        type: "integer"
        format: "int32"
        description: "Optional[Time that slave actor will wait for response from master.]\
          \ REF:Optional.empty"
      netconf-node-topology:reconnect-on-changed-schema:
        type: "boolean"
        description: "Optional[If true, the connector would auto disconnect/reconnect\
          \ when schemas are changed in the remote device.\nThe connector subscribes\
          \ (right after connect) to base netconf notifications and listens for netconf-capability-change\
          \ notification] REF:Optional.empty"
      cli-topology:available-capabilities:
        $ref: "cli.topology.clinodeconnectionstatus.AvailableCapabilities"
      username:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
        x-choice: "credentials:login-password"
    description: "Optional[The list of network nodes defined for the topology.] REF:Optional.empty"
    example:
      netconf-node-topology:sleep-factor: 0
      netconf-node-topology:default-request-timeout-millis: 6
      cli-topology:device-type: "cli-topology:device-type"
      netconf-node-topology:tcp-only: true
      cli-topology:connected-message: "cli-topology:connected-message"
      netconf-node-topology:port: 1
      password: "password"
      netconf-node-topology:unavailable-capabilities:
        unavailable-capability:
        - capability: "capability"
          failure-reason: {}
        - capability: "capability"
          failure-reason: {}
      netconf-node-topology:between-attempts-timeout-millis: 5
      netconf-node-topology:available-capabilities:
        available-capability:
        - capability: "capability"
          capability-origin: {}
        - capability: "capability"
          capability-origin: {}
      netconf-node-topology:max-connection-attempts: 5
      connection-lazy-timeout: 2
      cli-topology:connection-status: {}
      netconf-node-topology:concurrent-rpc-limit: 7
      connection-establish-timeout: 9
      cli-topology:default-commit-error-patterns:
        commit-error-pattern:
        - "commit-error-pattern"
        - "commit-error-pattern"
      keepalive-delay: 3
      login-password:
        password: "password"
        username: "username"
      netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
      cli-topology:port: 2
      netconf-node-topology:keepalive-delay: 4
      node-id: "node-id"
      netconf-node-topology:yang-module-capabilities:
        capability:
        - "capability"
        - "capability"
        override: true
      netconf-node-topology:yang-library:
        password: "password"
        yang-library-url: "yang-library-url"
        username: "username"
      netconf-node-topology:dry-run-journal-size: 7
      netconf-node-topology:odl-hello-message-capabilities:
        capability:
        - "capability"
        - "capability"
      secret: "secret"
      cli-topology:dry-run-journal-size: 1
      keepalive-initial-delay: 1
      supporting-node:
      - node-ref: "node-ref"
        topology-ref: "topology-ref"
      - node-ref: "node-ref"
        topology-ref: "topology-ref"
      netconf-node-topology:connection-timeout-millis: 1
      keepalive-timeout: 6
      netconf-node-topology:connection-status: {}
      netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
      cli-topology:device-version: "cli-topology:device-version"
      netconf-node-topology:pass-through: "{}"
      netconf-node-topology:non-module-capabilities:
        capability:
        - "capability"
        - "capability"
        override: true
      netconf-node-topology:schemaless: true
      key-based:
        key-id: "key-id"
        username: "username"
      cli-topology:pass-through: "{}"
      cli-topology:host: "cli-topology:host"
      cli-topology:default-error-patterns:
        error-pattern:
        - "error-pattern"
        - "error-pattern"
      cli-topology:transport-type: {}
      cli-topology:journal-level: {}
      cli-topology:journal-size: 7
      termination-point:
      - tp-ref:
        - "tp-ref"
        - "tp-ref"
        tp-id: "tp-id"
      - tp-ref:
        - "tp-ref"
        - "tp-ref"
        tp-id: "tp-id"
      netconf-node-topology:host: "netconf-node-topology:host"
      login-password-unencrypted:
        password: "password"
        username: "username"
      netconf-node-topology:clustered-connection-status:
        netconf-master-node: "netconf-master-node"
        node-status:
        - node: "node"
          status: {}
        - node: "node"
          status: {}
      netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
      command-timeout: 1
      netconf-node-topology:actor-response-wait-time: 4
      netconf-node-topology:reconnect-on-changed-schema: true
      cli-topology:available-capabilities:
        available-capability:
        - "available-capability"
        - "available-capability"
      username: "username"
  network.topology.networktopology.topology.TopologyTypes:
    properties:
      netconf-node-topology:topology-netconf:
        type: "object"
        description: "Optional.empty REF:Optional.empty"
        title: "netconf.node.topology.networktopology.topology.topologytypes.TopologyNetconf"
        properties: {}
    description: "Optional[This container is used to identify the type, or types\n\
      (as a topology can support several types simultaneously),\nof the topology.\n\
      Topology types are the subject of several integrity constraints\nthat an implementing\
      \ server can validate in order to\nmaintain integrity of the datastore.\nTopology\
      \ types are indicated through separate data nodes;\nthe set of topology types\
      \ is expected to increase over time.\nTo add support for a new topology, an\
      \ augmenting module\nneeds to augment this container with a new empty optional\n\
      container to indicate the new topology type.\nThe use of a container allows\
      \ to indicate a subcategorization\nof topology types.\nThe container SHALL NOT\
      \ be augmented with any data nodes\nthat serve a purpose other than identifying\
      \ a particular\ntopology type.\n] REF:Optional.empty"
    example:
      netconf-node-topology:topology-netconf: "{}"
  network.topology.networktopology.topology.UnderlayTopology:
    properties:
      topology-ref:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
        x-path: "/network-topology/topology/topology-id"
    description: "Optional[Identifies the topology, or topologies, that this topology\n\
      is dependent on.] REF:Optional.empty"
    example:
      topology-ref: "topology-ref"
  notifications.createsubscription.Input:
    properties:
      filter:
        type: "string"
        description: "Optional[An optional parameter that indicates which subset of\
          \ all\npossible events is of interest. The format of this\nparameter is\
          \ the same as that of the filter parameter\nin the NETCONF protocol operations.\
          \ If not present,\nall events not precluded by other parameters will\nbe\
          \ sent.] REF:Optional.empty"
      stopTime:
        type: "string"
        description: "Optional[An optional parameter used with the optional replay\n\
          feature to indicate the newest notifications of\ninterest. If stop time\
          \ is not present, the notifications\nwill continue until the subscription\
          \ is terminated.\nMust be used with startTime.] REF:Optional.empty"
      startTime:
        type: "string"
        description: "Optional[A parameter used to trigger the replay feature and\n\
          indicates that the replay should start at the time\nspecified. If start\
          \ time is not present, this is not a\nreplay subscription.] REF:Optional.empty"
      stream:
        type: "string"
        description: "Optional[An optional parameter that indicates which stream of\
          \ events\nis of interest. If not present, then events in the default\nNETCONF\
          \ stream will be sent.] REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
  network.topology.NetworkTopology.response:
    properties:
      network-topology:network-topology:
        $ref: "#/definitions/network.topology.NetworkTopology"
    description: "network.topology.NetworkTopology.response"
    example:
      network-topology:network-topology:
        topology:
        - node:
          - netconf-node-topology:sleep-factor: 0
            netconf-node-topology:default-request-timeout-millis: 6
            cli-topology:device-type: "cli-topology:device-type"
            netconf-node-topology:tcp-only: true
            cli-topology:connected-message: "cli-topology:connected-message"
            netconf-node-topology:port: 1
            password: "password"
            netconf-node-topology:unavailable-capabilities:
              unavailable-capability:
              - capability: "capability"
                failure-reason: {}
              - capability: "capability"
                failure-reason: {}
            netconf-node-topology:between-attempts-timeout-millis: 5
            netconf-node-topology:available-capabilities:
              available-capability:
              - capability: "capability"
                capability-origin: {}
              - capability: "capability"
                capability-origin: {}
            netconf-node-topology:max-connection-attempts: 5
            connection-lazy-timeout: 2
            cli-topology:connection-status: {}
            netconf-node-topology:concurrent-rpc-limit: 7
            connection-establish-timeout: 9
            cli-topology:default-commit-error-patterns:
              commit-error-pattern:
              - "commit-error-pattern"
              - "commit-error-pattern"
            keepalive-delay: 3
            login-password:
              password: "password"
              username: "username"
            netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
            cli-topology:port: 2
            netconf-node-topology:keepalive-delay: 4
            node-id: "node-id"
            netconf-node-topology:yang-module-capabilities:
              capability:
              - "capability"
              - "capability"
              override: true
            netconf-node-topology:yang-library:
              password: "password"
              yang-library-url: "yang-library-url"
              username: "username"
            netconf-node-topology:dry-run-journal-size: 7
            netconf-node-topology:odl-hello-message-capabilities:
              capability:
              - "capability"
              - "capability"
            secret: "secret"
            cli-topology:dry-run-journal-size: 1
            keepalive-initial-delay: 1
            supporting-node:
            - node-ref: "node-ref"
              topology-ref: "topology-ref"
            - node-ref: "node-ref"
              topology-ref: "topology-ref"
            netconf-node-topology:connection-timeout-millis: 1
            keepalive-timeout: 6
            netconf-node-topology:connection-status: {}
            netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
            cli-topology:device-version: "cli-topology:device-version"
            netconf-node-topology:pass-through: "{}"
            netconf-node-topology:non-module-capabilities:
              capability:
              - "capability"
              - "capability"
              override: true
            netconf-node-topology:schemaless: true
            key-based:
              key-id: "key-id"
              username: "username"
            cli-topology:pass-through: "{}"
            cli-topology:host: "cli-topology:host"
            cli-topology:default-error-patterns:
              error-pattern:
              - "error-pattern"
              - "error-pattern"
            cli-topology:transport-type: {}
            cli-topology:journal-level: {}
            cli-topology:journal-size: 7
            termination-point:
            - tp-ref:
              - "tp-ref"
              - "tp-ref"
              tp-id: "tp-id"
            - tp-ref:
              - "tp-ref"
              - "tp-ref"
              tp-id: "tp-id"
            netconf-node-topology:host: "netconf-node-topology:host"
            login-password-unencrypted:
              password: "password"
              username: "username"
            netconf-node-topology:clustered-connection-status:
              netconf-master-node: "netconf-master-node"
              node-status:
              - node: "node"
                status: {}
              - node: "node"
                status: {}
            netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
            command-timeout: 1
            netconf-node-topology:actor-response-wait-time: 4
            netconf-node-topology:reconnect-on-changed-schema: true
            cli-topology:available-capabilities:
              available-capability:
              - "available-capability"
              - "available-capability"
            username: "username"
          - netconf-node-topology:sleep-factor: 0
            netconf-node-topology:default-request-timeout-millis: 6
            cli-topology:device-type: "cli-topology:device-type"
            netconf-node-topology:tcp-only: true
            cli-topology:connected-message: "cli-topology:connected-message"
            netconf-node-topology:port: 1
            password: "password"
            netconf-node-topology:unavailable-capabilities:
              unavailable-capability:
              - capability: "capability"
                failure-reason: {}
              - capability: "capability"
                failure-reason: {}
            netconf-node-topology:between-attempts-timeout-millis: 5
            netconf-node-topology:available-capabilities:
              available-capability:
              - capability: "capability"
                capability-origin: {}
              - capability: "capability"
                capability-origin: {}
            netconf-node-topology:max-connection-attempts: 5
            connection-lazy-timeout: 2
            cli-topology:connection-status: {}
            netconf-node-topology:concurrent-rpc-limit: 7
            connection-establish-timeout: 9
            cli-topology:default-commit-error-patterns:
              commit-error-pattern:
              - "commit-error-pattern"
              - "commit-error-pattern"
            keepalive-delay: 3
            login-password:
              password: "password"
              username: "username"
            netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
            cli-topology:port: 2
            netconf-node-topology:keepalive-delay: 4
            node-id: "node-id"
            netconf-node-topology:yang-module-capabilities:
              capability:
              - "capability"
              - "capability"
              override: true
            netconf-node-topology:yang-library:
              password: "password"
              yang-library-url: "yang-library-url"
              username: "username"
            netconf-node-topology:dry-run-journal-size: 7
            netconf-node-topology:odl-hello-message-capabilities:
              capability:
              - "capability"
              - "capability"
            secret: "secret"
            cli-topology:dry-run-journal-size: 1
            keepalive-initial-delay: 1
            supporting-node:
            - node-ref: "node-ref"
              topology-ref: "topology-ref"
            - node-ref: "node-ref"
              topology-ref: "topology-ref"
            netconf-node-topology:connection-timeout-millis: 1
            keepalive-timeout: 6
            netconf-node-topology:connection-status: {}
            netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
            cli-topology:device-version: "cli-topology:device-version"
            netconf-node-topology:pass-through: "{}"
            netconf-node-topology:non-module-capabilities:
              capability:
              - "capability"
              - "capability"
              override: true
            netconf-node-topology:schemaless: true
            key-based:
              key-id: "key-id"
              username: "username"
            cli-topology:pass-through: "{}"
            cli-topology:host: "cli-topology:host"
            cli-topology:default-error-patterns:
              error-pattern:
              - "error-pattern"
              - "error-pattern"
            cli-topology:transport-type: {}
            cli-topology:journal-level: {}
            cli-topology:journal-size: 7
            termination-point:
            - tp-ref:
              - "tp-ref"
              - "tp-ref"
              tp-id: "tp-id"
            - tp-ref:
              - "tp-ref"
              - "tp-ref"
              tp-id: "tp-id"
            netconf-node-topology:host: "netconf-node-topology:host"
            login-password-unencrypted:
              password: "password"
              username: "username"
            netconf-node-topology:clustered-connection-status:
              netconf-master-node: "netconf-master-node"
              node-status:
              - node: "node"
                status: {}
              - node: "node"
                status: {}
            netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
            command-timeout: 1
            netconf-node-topology:actor-response-wait-time: 4
            netconf-node-topology:reconnect-on-changed-schema: true
            cli-topology:available-capabilities:
              available-capability:
              - "available-capability"
              - "available-capability"
            username: "username"
          topology-types:
            netconf-node-topology:topology-netconf: "{}"
          topology-id: "topology-id"
          link:
          - link-id: "link-id"
            supporting-link:
            - link-ref: "link-ref"
            - link-ref: "link-ref"
            destination:
              dest-node: "dest-node"
              dest-tp: "dest-tp"
            source:
              source-node: "source-node"
              source-tp: "source-tp"
          - link-id: "link-id"
            supporting-link:
            - link-ref: "link-ref"
            - link-ref: "link-ref"
            destination:
              dest-node: "dest-node"
              dest-tp: "dest-tp"
            source:
              source-node: "source-node"
              source-tp: "source-tp"
          server-provided: true
          underlay-topology:
          - topology-ref: "topology-ref"
          - topology-ref: "topology-ref"
        - node:
          - netconf-node-topology:sleep-factor: 0
            netconf-node-topology:default-request-timeout-millis: 6
            cli-topology:device-type: "cli-topology:device-type"
            netconf-node-topology:tcp-only: true
            cli-topology:connected-message: "cli-topology:connected-message"
            netconf-node-topology:port: 1
            password: "password"
            netconf-node-topology:unavailable-capabilities:
              unavailable-capability:
              - capability: "capability"
                failure-reason: {}
              - capability: "capability"
                failure-reason: {}
            netconf-node-topology:between-attempts-timeout-millis: 5
            netconf-node-topology:available-capabilities:
              available-capability:
              - capability: "capability"
                capability-origin: {}
              - capability: "capability"
                capability-origin: {}
            netconf-node-topology:max-connection-attempts: 5
            connection-lazy-timeout: 2
            cli-topology:connection-status: {}
            netconf-node-topology:concurrent-rpc-limit: 7
            connection-establish-timeout: 9
            cli-topology:default-commit-error-patterns:
              commit-error-pattern:
              - "commit-error-pattern"
              - "commit-error-pattern"
            keepalive-delay: 3
            login-password:
              password: "password"
              username: "username"
            netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
            cli-topology:port: 2
            netconf-node-topology:keepalive-delay: 4
            node-id: "node-id"
            netconf-node-topology:yang-module-capabilities:
              capability:
              - "capability"
              - "capability"
              override: true
            netconf-node-topology:yang-library:
              password: "password"
              yang-library-url: "yang-library-url"
              username: "username"
            netconf-node-topology:dry-run-journal-size: 7
            netconf-node-topology:odl-hello-message-capabilities:
              capability:
              - "capability"
              - "capability"
            secret: "secret"
            cli-topology:dry-run-journal-size: 1
            keepalive-initial-delay: 1
            supporting-node:
            - node-ref: "node-ref"
              topology-ref: "topology-ref"
            - node-ref: "node-ref"
              topology-ref: "topology-ref"
            netconf-node-topology:connection-timeout-millis: 1
            keepalive-timeout: 6
            netconf-node-topology:connection-status: {}
            netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
            cli-topology:device-version: "cli-topology:device-version"
            netconf-node-topology:pass-through: "{}"
            netconf-node-topology:non-module-capabilities:
              capability:
              - "capability"
              - "capability"
              override: true
            netconf-node-topology:schemaless: true
            key-based:
              key-id: "key-id"
              username: "username"
            cli-topology:pass-through: "{}"
            cli-topology:host: "cli-topology:host"
            cli-topology:default-error-patterns:
              error-pattern:
              - "error-pattern"
              - "error-pattern"
            cli-topology:transport-type: {}
            cli-topology:journal-level: {}
            cli-topology:journal-size: 7
            termination-point:
            - tp-ref:
              - "tp-ref"
              - "tp-ref"
              tp-id: "tp-id"
            - tp-ref:
              - "tp-ref"
              - "tp-ref"
              tp-id: "tp-id"
            netconf-node-topology:host: "netconf-node-topology:host"
            login-password-unencrypted:
              password: "password"
              username: "username"
            netconf-node-topology:clustered-connection-status:
              netconf-master-node: "netconf-master-node"
              node-status:
              - node: "node"
                status: {}
              - node: "node"
                status: {}
            netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
            command-timeout: 1
            netconf-node-topology:actor-response-wait-time: 4
            netconf-node-topology:reconnect-on-changed-schema: true
            cli-topology:available-capabilities:
              available-capability:
              - "available-capability"
              - "available-capability"
            username: "username"
          - netconf-node-topology:sleep-factor: 0
            netconf-node-topology:default-request-timeout-millis: 6
            cli-topology:device-type: "cli-topology:device-type"
            netconf-node-topology:tcp-only: true
            cli-topology:connected-message: "cli-topology:connected-message"
            netconf-node-topology:port: 1
            password: "password"
            netconf-node-topology:unavailable-capabilities:
              unavailable-capability:
              - capability: "capability"
                failure-reason: {}
              - capability: "capability"
                failure-reason: {}
            netconf-node-topology:between-attempts-timeout-millis: 5
            netconf-node-topology:available-capabilities:
              available-capability:
              - capability: "capability"
                capability-origin: {}
              - capability: "capability"
                capability-origin: {}
            netconf-node-topology:max-connection-attempts: 5
            connection-lazy-timeout: 2
            cli-topology:connection-status: {}
            netconf-node-topology:concurrent-rpc-limit: 7
            connection-establish-timeout: 9
            cli-topology:default-commit-error-patterns:
              commit-error-pattern:
              - "commit-error-pattern"
              - "commit-error-pattern"
            keepalive-delay: 3
            login-password:
              password: "password"
              username: "username"
            netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
            cli-topology:port: 2
            netconf-node-topology:keepalive-delay: 4
            node-id: "node-id"
            netconf-node-topology:yang-module-capabilities:
              capability:
              - "capability"
              - "capability"
              override: true
            netconf-node-topology:yang-library:
              password: "password"
              yang-library-url: "yang-library-url"
              username: "username"
            netconf-node-topology:dry-run-journal-size: 7
            netconf-node-topology:odl-hello-message-capabilities:
              capability:
              - "capability"
              - "capability"
            secret: "secret"
            cli-topology:dry-run-journal-size: 1
            keepalive-initial-delay: 1
            supporting-node:
            - node-ref: "node-ref"
              topology-ref: "topology-ref"
            - node-ref: "node-ref"
              topology-ref: "topology-ref"
            netconf-node-topology:connection-timeout-millis: 1
            keepalive-timeout: 6
            netconf-node-topology:connection-status: {}
            netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
            cli-topology:device-version: "cli-topology:device-version"
            netconf-node-topology:pass-through: "{}"
            netconf-node-topology:non-module-capabilities:
              capability:
              - "capability"
              - "capability"
              override: true
            netconf-node-topology:schemaless: true
            key-based:
              key-id: "key-id"
              username: "username"
            cli-topology:pass-through: "{}"
            cli-topology:host: "cli-topology:host"
            cli-topology:default-error-patterns:
              error-pattern:
              - "error-pattern"
              - "error-pattern"
            cli-topology:transport-type: {}
            cli-topology:journal-level: {}
            cli-topology:journal-size: 7
            termination-point:
            - tp-ref:
              - "tp-ref"
              - "tp-ref"
              tp-id: "tp-id"
            - tp-ref:
              - "tp-ref"
              - "tp-ref"
              tp-id: "tp-id"
            netconf-node-topology:host: "netconf-node-topology:host"
            login-password-unencrypted:
              password: "password"
              username: "username"
            netconf-node-topology:clustered-connection-status:
              netconf-master-node: "netconf-master-node"
              node-status:
              - node: "node"
                status: {}
              - node: "node"
                status: {}
            netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
            command-timeout: 1
            netconf-node-topology:actor-response-wait-time: 4
            netconf-node-topology:reconnect-on-changed-schema: true
            cli-topology:available-capabilities:
              available-capability:
              - "available-capability"
              - "available-capability"
            username: "username"
          topology-types:
            netconf-node-topology:topology-netconf: "{}"
          topology-id: "topology-id"
          link:
          - link-id: "link-id"
            supporting-link:
            - link-ref: "link-ref"
            - link-ref: "link-ref"
            destination:
              dest-node: "dest-node"
              dest-tp: "dest-tp"
            source:
              source-node: "source-node"
              source-tp: "source-tp"
          - link-id: "link-id"
            supporting-link:
            - link-ref: "link-ref"
            - link-ref: "link-ref"
            destination:
              dest-node: "dest-node"
              dest-tp: "dest-tp"
            source:
              source-node: "source-node"
              source-tp: "source-tp"
          server-provided: true
          underlay-topology:
          - topology-ref: "topology-ref"
          - topology-ref: "topology-ref"
  network.topology.NetworkTopology.request:
    properties:
      network-topology:network-topology:
        $ref: "#/definitions/network.topology.NetworkTopology"
    title: "network.topology.NetworkTopology.request"
    description: "network.topology.NetworkTopology.request"
  network.topology.networktopology.Topology.response:
    properties:
      network-topology:topology:
        type: "array"
        items:
          $ref: "#/definitions/network.topology.networktopology.Topology"
    description: "network.topology.networktopology.Topology.response"
    example:
      network-topology:topology:
      - node:
        - netconf-node-topology:sleep-factor: 0
          netconf-node-topology:default-request-timeout-millis: 6
          cli-topology:device-type: "cli-topology:device-type"
          netconf-node-topology:tcp-only: true
          cli-topology:connected-message: "cli-topology:connected-message"
          netconf-node-topology:port: 1
          password: "password"
          netconf-node-topology:unavailable-capabilities:
            unavailable-capability:
            - capability: "capability"
              failure-reason: {}
            - capability: "capability"
              failure-reason: {}
          netconf-node-topology:between-attempts-timeout-millis: 5
          netconf-node-topology:available-capabilities:
            available-capability:
            - capability: "capability"
              capability-origin: {}
            - capability: "capability"
              capability-origin: {}
          netconf-node-topology:max-connection-attempts: 5
          connection-lazy-timeout: 2
          cli-topology:connection-status: {}
          netconf-node-topology:concurrent-rpc-limit: 7
          connection-establish-timeout: 9
          cli-topology:default-commit-error-patterns:
            commit-error-pattern:
            - "commit-error-pattern"
            - "commit-error-pattern"
          keepalive-delay: 3
          login-password:
            password: "password"
            username: "username"
          netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
          cli-topology:port: 2
          netconf-node-topology:keepalive-delay: 4
          node-id: "node-id"
          netconf-node-topology:yang-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:yang-library:
            password: "password"
            yang-library-url: "yang-library-url"
            username: "username"
          netconf-node-topology:dry-run-journal-size: 7
          netconf-node-topology:odl-hello-message-capabilities:
            capability:
            - "capability"
            - "capability"
          secret: "secret"
          cli-topology:dry-run-journal-size: 1
          keepalive-initial-delay: 1
          supporting-node:
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          netconf-node-topology:connection-timeout-millis: 1
          keepalive-timeout: 6
          netconf-node-topology:connection-status: {}
          netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
          cli-topology:device-version: "cli-topology:device-version"
          netconf-node-topology:pass-through: "{}"
          netconf-node-topology:non-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:schemaless: true
          key-based:
            key-id: "key-id"
            username: "username"
          cli-topology:pass-through: "{}"
          cli-topology:host: "cli-topology:host"
          cli-topology:default-error-patterns:
            error-pattern:
            - "error-pattern"
            - "error-pattern"
          cli-topology:transport-type: {}
          cli-topology:journal-level: {}
          cli-topology:journal-size: 7
          termination-point:
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          netconf-node-topology:host: "netconf-node-topology:host"
          login-password-unencrypted:
            password: "password"
            username: "username"
          netconf-node-topology:clustered-connection-status:
            netconf-master-node: "netconf-master-node"
            node-status:
            - node: "node"
              status: {}
            - node: "node"
              status: {}
          netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
          command-timeout: 1
          netconf-node-topology:actor-response-wait-time: 4
          netconf-node-topology:reconnect-on-changed-schema: true
          cli-topology:available-capabilities:
            available-capability:
            - "available-capability"
            - "available-capability"
          username: "username"
        - netconf-node-topology:sleep-factor: 0
          netconf-node-topology:default-request-timeout-millis: 6
          cli-topology:device-type: "cli-topology:device-type"
          netconf-node-topology:tcp-only: true
          cli-topology:connected-message: "cli-topology:connected-message"
          netconf-node-topology:port: 1
          password: "password"
          netconf-node-topology:unavailable-capabilities:
            unavailable-capability:
            - capability: "capability"
              failure-reason: {}
            - capability: "capability"
              failure-reason: {}
          netconf-node-topology:between-attempts-timeout-millis: 5
          netconf-node-topology:available-capabilities:
            available-capability:
            - capability: "capability"
              capability-origin: {}
            - capability: "capability"
              capability-origin: {}
          netconf-node-topology:max-connection-attempts: 5
          connection-lazy-timeout: 2
          cli-topology:connection-status: {}
          netconf-node-topology:concurrent-rpc-limit: 7
          connection-establish-timeout: 9
          cli-topology:default-commit-error-patterns:
            commit-error-pattern:
            - "commit-error-pattern"
            - "commit-error-pattern"
          keepalive-delay: 3
          login-password:
            password: "password"
            username: "username"
          netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
          cli-topology:port: 2
          netconf-node-topology:keepalive-delay: 4
          node-id: "node-id"
          netconf-node-topology:yang-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:yang-library:
            password: "password"
            yang-library-url: "yang-library-url"
            username: "username"
          netconf-node-topology:dry-run-journal-size: 7
          netconf-node-topology:odl-hello-message-capabilities:
            capability:
            - "capability"
            - "capability"
          secret: "secret"
          cli-topology:dry-run-journal-size: 1
          keepalive-initial-delay: 1
          supporting-node:
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          netconf-node-topology:connection-timeout-millis: 1
          keepalive-timeout: 6
          netconf-node-topology:connection-status: {}
          netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
          cli-topology:device-version: "cli-topology:device-version"
          netconf-node-topology:pass-through: "{}"
          netconf-node-topology:non-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:schemaless: true
          key-based:
            key-id: "key-id"
            username: "username"
          cli-topology:pass-through: "{}"
          cli-topology:host: "cli-topology:host"
          cli-topology:default-error-patterns:
            error-pattern:
            - "error-pattern"
            - "error-pattern"
          cli-topology:transport-type: {}
          cli-topology:journal-level: {}
          cli-topology:journal-size: 7
          termination-point:
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          netconf-node-topology:host: "netconf-node-topology:host"
          login-password-unencrypted:
            password: "password"
            username: "username"
          netconf-node-topology:clustered-connection-status:
            netconf-master-node: "netconf-master-node"
            node-status:
            - node: "node"
              status: {}
            - node: "node"
              status: {}
          netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
          command-timeout: 1
          netconf-node-topology:actor-response-wait-time: 4
          netconf-node-topology:reconnect-on-changed-schema: true
          cli-topology:available-capabilities:
            available-capability:
            - "available-capability"
            - "available-capability"
          username: "username"
        topology-types:
          netconf-node-topology:topology-netconf: "{}"
        topology-id: "topology-id"
        link:
        - link-id: "link-id"
          supporting-link:
          - link-ref: "link-ref"
          - link-ref: "link-ref"
          destination:
            dest-node: "dest-node"
            dest-tp: "dest-tp"
          source:
            source-node: "source-node"
            source-tp: "source-tp"
        - link-id: "link-id"
          supporting-link:
          - link-ref: "link-ref"
          - link-ref: "link-ref"
          destination:
            dest-node: "dest-node"
            dest-tp: "dest-tp"
          source:
            source-node: "source-node"
            source-tp: "source-tp"
        server-provided: true
        underlay-topology:
        - topology-ref: "topology-ref"
        - topology-ref: "topology-ref"
      - node:
        - netconf-node-topology:sleep-factor: 0
          netconf-node-topology:default-request-timeout-millis: 6
          cli-topology:device-type: "cli-topology:device-type"
          netconf-node-topology:tcp-only: true
          cli-topology:connected-message: "cli-topology:connected-message"
          netconf-node-topology:port: 1
          password: "password"
          netconf-node-topology:unavailable-capabilities:
            unavailable-capability:
            - capability: "capability"
              failure-reason: {}
            - capability: "capability"
              failure-reason: {}
          netconf-node-topology:between-attempts-timeout-millis: 5
          netconf-node-topology:available-capabilities:
            available-capability:
            - capability: "capability"
              capability-origin: {}
            - capability: "capability"
              capability-origin: {}
          netconf-node-topology:max-connection-attempts: 5
          connection-lazy-timeout: 2
          cli-topology:connection-status: {}
          netconf-node-topology:concurrent-rpc-limit: 7
          connection-establish-timeout: 9
          cli-topology:default-commit-error-patterns:
            commit-error-pattern:
            - "commit-error-pattern"
            - "commit-error-pattern"
          keepalive-delay: 3
          login-password:
            password: "password"
            username: "username"
          netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
          cli-topology:port: 2
          netconf-node-topology:keepalive-delay: 4
          node-id: "node-id"
          netconf-node-topology:yang-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:yang-library:
            password: "password"
            yang-library-url: "yang-library-url"
            username: "username"
          netconf-node-topology:dry-run-journal-size: 7
          netconf-node-topology:odl-hello-message-capabilities:
            capability:
            - "capability"
            - "capability"
          secret: "secret"
          cli-topology:dry-run-journal-size: 1
          keepalive-initial-delay: 1
          supporting-node:
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          netconf-node-topology:connection-timeout-millis: 1
          keepalive-timeout: 6
          netconf-node-topology:connection-status: {}
          netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
          cli-topology:device-version: "cli-topology:device-version"
          netconf-node-topology:pass-through: "{}"
          netconf-node-topology:non-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:schemaless: true
          key-based:
            key-id: "key-id"
            username: "username"
          cli-topology:pass-through: "{}"
          cli-topology:host: "cli-topology:host"
          cli-topology:default-error-patterns:
            error-pattern:
            - "error-pattern"
            - "error-pattern"
          cli-topology:transport-type: {}
          cli-topology:journal-level: {}
          cli-topology:journal-size: 7
          termination-point:
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          netconf-node-topology:host: "netconf-node-topology:host"
          login-password-unencrypted:
            password: "password"
            username: "username"
          netconf-node-topology:clustered-connection-status:
            netconf-master-node: "netconf-master-node"
            node-status:
            - node: "node"
              status: {}
            - node: "node"
              status: {}
          netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
          command-timeout: 1
          netconf-node-topology:actor-response-wait-time: 4
          netconf-node-topology:reconnect-on-changed-schema: true
          cli-topology:available-capabilities:
            available-capability:
            - "available-capability"
            - "available-capability"
          username: "username"
        - netconf-node-topology:sleep-factor: 0
          netconf-node-topology:default-request-timeout-millis: 6
          cli-topology:device-type: "cli-topology:device-type"
          netconf-node-topology:tcp-only: true
          cli-topology:connected-message: "cli-topology:connected-message"
          netconf-node-topology:port: 1
          password: "password"
          netconf-node-topology:unavailable-capabilities:
            unavailable-capability:
            - capability: "capability"
              failure-reason: {}
            - capability: "capability"
              failure-reason: {}
          netconf-node-topology:between-attempts-timeout-millis: 5
          netconf-node-topology:available-capabilities:
            available-capability:
            - capability: "capability"
              capability-origin: {}
            - capability: "capability"
              capability-origin: {}
          netconf-node-topology:max-connection-attempts: 5
          connection-lazy-timeout: 2
          cli-topology:connection-status: {}
          netconf-node-topology:concurrent-rpc-limit: 7
          connection-establish-timeout: 9
          cli-topology:default-commit-error-patterns:
            commit-error-pattern:
            - "commit-error-pattern"
            - "commit-error-pattern"
          keepalive-delay: 3
          login-password:
            password: "password"
            username: "username"
          netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
          cli-topology:port: 2
          netconf-node-topology:keepalive-delay: 4
          node-id: "node-id"
          netconf-node-topology:yang-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:yang-library:
            password: "password"
            yang-library-url: "yang-library-url"
            username: "username"
          netconf-node-topology:dry-run-journal-size: 7
          netconf-node-topology:odl-hello-message-capabilities:
            capability:
            - "capability"
            - "capability"
          secret: "secret"
          cli-topology:dry-run-journal-size: 1
          keepalive-initial-delay: 1
          supporting-node:
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          - node-ref: "node-ref"
            topology-ref: "topology-ref"
          netconf-node-topology:connection-timeout-millis: 1
          keepalive-timeout: 6
          netconf-node-topology:connection-status: {}
          netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
          cli-topology:device-version: "cli-topology:device-version"
          netconf-node-topology:pass-through: "{}"
          netconf-node-topology:non-module-capabilities:
            capability:
            - "capability"
            - "capability"
            override: true
          netconf-node-topology:schemaless: true
          key-based:
            key-id: "key-id"
            username: "username"
          cli-topology:pass-through: "{}"
          cli-topology:host: "cli-topology:host"
          cli-topology:default-error-patterns:
            error-pattern:
            - "error-pattern"
            - "error-pattern"
          cli-topology:transport-type: {}
          cli-topology:journal-level: {}
          cli-topology:journal-size: 7
          termination-point:
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          - tp-ref:
            - "tp-ref"
            - "tp-ref"
            tp-id: "tp-id"
          netconf-node-topology:host: "netconf-node-topology:host"
          login-password-unencrypted:
            password: "password"
            username: "username"
          netconf-node-topology:clustered-connection-status:
            netconf-master-node: "netconf-master-node"
            node-status:
            - node: "node"
              status: {}
            - node: "node"
              status: {}
          netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
          command-timeout: 1
          netconf-node-topology:actor-response-wait-time: 4
          netconf-node-topology:reconnect-on-changed-schema: true
          cli-topology:available-capabilities:
            available-capability:
            - "available-capability"
            - "available-capability"
          username: "username"
        topology-types:
          netconf-node-topology:topology-netconf: "{}"
        topology-id: "topology-id"
        link:
        - link-id: "link-id"
          supporting-link:
          - link-ref: "link-ref"
          - link-ref: "link-ref"
          destination:
            dest-node: "dest-node"
            dest-tp: "dest-tp"
          source:
            source-node: "source-node"
            source-tp: "source-tp"
        - link-id: "link-id"
          supporting-link:
          - link-ref: "link-ref"
          - link-ref: "link-ref"
          destination:
            dest-node: "dest-node"
            dest-tp: "dest-tp"
          source:
            source-node: "source-node"
            source-tp: "source-tp"
        server-provided: true
        underlay-topology:
        - topology-ref: "topology-ref"
        - topology-ref: "topology-ref"
  network.topology.networktopology.Topology.request:
    properties:
      network-topology:topology:
        type: "array"
        items:
          $ref: "#/definitions/network.topology.networktopology.Topology"
    title: "network.topology.networktopology.Topology.request"
    description: "network.topology.networktopology.Topology.request"
  network.topology.networktopology.topology.Link.response:
    properties:
      network-topology:link:
        type: "array"
        items:
          $ref: "#/definitions/network.topology.networktopology.topology.Link"
    description: "network.topology.networktopology.topology.Link.response"
    example:
      network-topology:link:
      - link-id: "link-id"
        supporting-link:
        - link-ref: "link-ref"
        - link-ref: "link-ref"
        destination:
          dest-node: "dest-node"
          dest-tp: "dest-tp"
        source:
          source-node: "source-node"
          source-tp: "source-tp"
      - link-id: "link-id"
        supporting-link:
        - link-ref: "link-ref"
        - link-ref: "link-ref"
        destination:
          dest-node: "dest-node"
          dest-tp: "dest-tp"
        source:
          source-node: "source-node"
          source-tp: "source-tp"
  network.topology.networktopology.topology.Link.request:
    properties:
      network-topology:link:
        type: "array"
        items:
          $ref: "#/definitions/network.topology.networktopology.topology.Link"
    title: "network.topology.networktopology.topology.Link.request"
    description: "network.topology.networktopology.topology.Link.request"
  network.topology.networktopology.topology.Node.response:
    properties:
      network-topology:node:
        type: "array"
        items:
          $ref: "#/definitions/network.topology.networktopology.topology.Node"
    description: "network.topology.networktopology.topology.Node.response"
    example:
      network-topology:node:
      - netconf-node-topology:sleep-factor: 0
        netconf-node-topology:default-request-timeout-millis: 6
        cli-topology:device-type: "cli-topology:device-type"
        netconf-node-topology:tcp-only: true
        cli-topology:connected-message: "cli-topology:connected-message"
        netconf-node-topology:port: 1
        password: "password"
        netconf-node-topology:unavailable-capabilities:
          unavailable-capability:
          - capability: "capability"
            failure-reason: {}
          - capability: "capability"
            failure-reason: {}
        netconf-node-topology:between-attempts-timeout-millis: 5
        netconf-node-topology:available-capabilities:
          available-capability:
          - capability: "capability"
            capability-origin: {}
          - capability: "capability"
            capability-origin: {}
        netconf-node-topology:max-connection-attempts: 5
        connection-lazy-timeout: 2
        cli-topology:connection-status: {}
        netconf-node-topology:concurrent-rpc-limit: 7
        connection-establish-timeout: 9
        cli-topology:default-commit-error-patterns:
          commit-error-pattern:
          - "commit-error-pattern"
          - "commit-error-pattern"
        keepalive-delay: 3
        login-password:
          password: "password"
          username: "username"
        netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
        cli-topology:port: 2
        netconf-node-topology:keepalive-delay: 4
        node-id: "node-id"
        netconf-node-topology:yang-module-capabilities:
          capability:
          - "capability"
          - "capability"
          override: true
        netconf-node-topology:yang-library:
          password: "password"
          yang-library-url: "yang-library-url"
          username: "username"
        netconf-node-topology:dry-run-journal-size: 7
        netconf-node-topology:odl-hello-message-capabilities:
          capability:
          - "capability"
          - "capability"
        secret: "secret"
        cli-topology:dry-run-journal-size: 1
        keepalive-initial-delay: 1
        supporting-node:
        - node-ref: "node-ref"
          topology-ref: "topology-ref"
        - node-ref: "node-ref"
          topology-ref: "topology-ref"
        netconf-node-topology:connection-timeout-millis: 1
        keepalive-timeout: 6
        netconf-node-topology:connection-status: {}
        netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
        cli-topology:device-version: "cli-topology:device-version"
        netconf-node-topology:pass-through: "{}"
        netconf-node-topology:non-module-capabilities:
          capability:
          - "capability"
          - "capability"
          override: true
        netconf-node-topology:schemaless: true
        key-based:
          key-id: "key-id"
          username: "username"
        cli-topology:pass-through: "{}"
        cli-topology:host: "cli-topology:host"
        cli-topology:default-error-patterns:
          error-pattern:
          - "error-pattern"
          - "error-pattern"
        cli-topology:transport-type: {}
        cli-topology:journal-level: {}
        cli-topology:journal-size: 7
        termination-point:
        - tp-ref:
          - "tp-ref"
          - "tp-ref"
          tp-id: "tp-id"
        - tp-ref:
          - "tp-ref"
          - "tp-ref"
          tp-id: "tp-id"
        netconf-node-topology:host: "netconf-node-topology:host"
        login-password-unencrypted:
          password: "password"
          username: "username"
        netconf-node-topology:clustered-connection-status:
          netconf-master-node: "netconf-master-node"
          node-status:
          - node: "node"
            status: {}
          - node: "node"
            status: {}
        netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
        command-timeout: 1
        netconf-node-topology:actor-response-wait-time: 4
        netconf-node-topology:reconnect-on-changed-schema: true
        cli-topology:available-capabilities:
          available-capability:
          - "available-capability"
          - "available-capability"
        username: "username"
      - netconf-node-topology:sleep-factor: 0
        netconf-node-topology:default-request-timeout-millis: 6
        cli-topology:device-type: "cli-topology:device-type"
        netconf-node-topology:tcp-only: true
        cli-topology:connected-message: "cli-topology:connected-message"
        netconf-node-topology:port: 1
        password: "password"
        netconf-node-topology:unavailable-capabilities:
          unavailable-capability:
          - capability: "capability"
            failure-reason: {}
          - capability: "capability"
            failure-reason: {}
        netconf-node-topology:between-attempts-timeout-millis: 5
        netconf-node-topology:available-capabilities:
          available-capability:
          - capability: "capability"
            capability-origin: {}
          - capability: "capability"
            capability-origin: {}
        netconf-node-topology:max-connection-attempts: 5
        connection-lazy-timeout: 2
        cli-topology:connection-status: {}
        netconf-node-topology:concurrent-rpc-limit: 7
        connection-establish-timeout: 9
        cli-topology:default-commit-error-patterns:
          commit-error-pattern:
          - "commit-error-pattern"
          - "commit-error-pattern"
        keepalive-delay: 3
        login-password:
          password: "password"
          username: "username"
        netconf-node-topology:connected-message: "netconf-node-topology:connected-message"
        cli-topology:port: 2
        netconf-node-topology:keepalive-delay: 4
        node-id: "node-id"
        netconf-node-topology:yang-module-capabilities:
          capability:
          - "capability"
          - "capability"
          override: true
        netconf-node-topology:yang-library:
          password: "password"
          yang-library-url: "yang-library-url"
          username: "username"
        netconf-node-topology:dry-run-journal-size: 7
        netconf-node-topology:odl-hello-message-capabilities:
          capability:
          - "capability"
          - "capability"
        secret: "secret"
        cli-topology:dry-run-journal-size: 1
        keepalive-initial-delay: 1
        supporting-node:
        - node-ref: "node-ref"
          topology-ref: "topology-ref"
        - node-ref: "node-ref"
          topology-ref: "topology-ref"
        netconf-node-topology:connection-timeout-millis: 1
        keepalive-timeout: 6
        netconf-node-topology:connection-status: {}
        netconf-node-topology:schema-cache-directory: "netconf-node-topology:schema-cache-directory"
        cli-topology:device-version: "cli-topology:device-version"
        netconf-node-topology:pass-through: "{}"
        netconf-node-topology:non-module-capabilities:
          capability:
          - "capability"
          - "capability"
          override: true
        netconf-node-topology:schemaless: true
        key-based:
          key-id: "key-id"
          username: "username"
        cli-topology:pass-through: "{}"
        cli-topology:host: "cli-topology:host"
        cli-topology:default-error-patterns:
          error-pattern:
          - "error-pattern"
          - "error-pattern"
        cli-topology:transport-type: {}
        cli-topology:journal-level: {}
        cli-topology:journal-size: 7
        termination-point:
        - tp-ref:
          - "tp-ref"
          - "tp-ref"
          tp-id: "tp-id"
        - tp-ref:
          - "tp-ref"
          - "tp-ref"
          tp-id: "tp-id"
        netconf-node-topology:host: "netconf-node-topology:host"
        login-password-unencrypted:
          password: "password"
          username: "username"
        netconf-node-topology:clustered-connection-status:
          netconf-master-node: "netconf-master-node"
          node-status:
          - node: "node"
            status: {}
          - node: "node"
            status: {}
        netconf-node-topology:customization-factory: "netconf-node-topology:customization-factory"
        command-timeout: 1
        netconf-node-topology:actor-response-wait-time: 4
        netconf-node-topology:reconnect-on-changed-schema: true
        cli-topology:available-capabilities:
          available-capability:
          - "available-capability"
          - "available-capability"
        username: "username"
  network.topology.networktopology.topology.Node.request:
    properties:
      network-topology:node:
        type: "array"
        items:
          $ref: "#/definitions/network.topology.networktopology.topology.Node"
    title: "network.topology.networktopology.topology.Node.request"
    description: "network.topology.networktopology.topology.Node.request"
  network.topology.networktopology.topology.TopologyTypes.response:
    properties:
      network-topology:topology-types:
        $ref: "#/definitions/network.topology.networktopology.topology.TopologyTypes"
    description: "network.topology.networktopology.topology.TopologyTypes.response"
    example:
      network-topology:topology-types:
        netconf-node-topology:topology-netconf: "{}"
  network.topology.networktopology.topology.TopologyTypes.request:
    properties:
      network-topology:topology-types:
        $ref: "#/definitions/network.topology.networktopology.topology.TopologyTypes"
    title: "network.topology.networktopology.topology.TopologyTypes.request"
    description: "network.topology.networktopology.topology.TopologyTypes.request"
  network.topology.networktopology.topology.UnderlayTopology.response:
    properties:
      network-topology:underlay-topology:
        type: "array"
        items:
          $ref: "#/definitions/network.topology.networktopology.topology.UnderlayTopology"
    description: "network.topology.networktopology.topology.UnderlayTopology.response"
    example:
      network-topology:underlay-topology:
      - topology-ref: "topology-ref"
      - topology-ref: "topology-ref"
  network.topology.networktopology.topology.UnderlayTopology.request:
    properties:
      network-topology:underlay-topology:
        type: "array"
        items:
          $ref: "#/definitions/network.topology.networktopology.topology.UnderlayTopology"
    title: "network.topology.networktopology.topology.UnderlayTopology.request"
    description: "network.topology.networktopology.topology.UnderlayTopology.request"
  ietf.netconf.monitoring.getschema.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/ietf.netconf.monitoring.getschema.Input"
  ietf.netconf.cancelcommit.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/ietf.netconf.cancelcommit.Input"
  ietf.netconf.commit.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/ietf.netconf.commit.Input"
  ietf.netconf.copyconfig.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/ietf.netconf.copyconfig.Input"
  ietf.netconf.deleteconfig.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/ietf.netconf.deleteconfig.Input"
  ietf.netconf.editconfig.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/ietf.netconf.editconfig.Input"
  ietf.netconf.getconfig.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/ietf.netconf.getconfig.Input"
  ietf.netconf.get.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/ietf.netconf.get.Input"
  ietf.netconf.killsession.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/ietf.netconf.killsession.Input"
  ietf.netconf.lock.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/ietf.netconf.lock.Input"
  ietf.netconf.unlock.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/ietf.netconf.unlock.Input"
  ietf.netconf.validate.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/ietf.netconf.validate.Input"
  netconf.keystore.addkeystoreentry.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/netconf.keystore.addkeystoreentry.Input"
  netconf.keystore.addprivatekey.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/netconf.keystore.addprivatekey.Input"
  netconf.keystore.addtrustedcertificate.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/netconf.keystore.addtrustedcertificate.Input"
  netconf.keystore.removekeystoreentry.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/netconf.keystore.removekeystoreentry.Input"
  netconf.keystore.removeprivatekey.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/netconf.keystore.removeprivatekey.Input"
  netconf.keystore.removetrustedcertificate.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/netconf.keystore.removetrustedcertificate.Input"
  netconf.node.topology.createdevice.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/netconf.node.topology.createdevice.Input"
  netconf.node.topology.deletedevice.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/netconf.node.topology.deletedevice.Input"
  notifications.createsubscription.Input.bodyparam:
    properties:
      input:
        $ref: "#/definitions/notifications.createsubscription.Input"
  ietf.netconf.get.Output:
    properties:
      data:
        type: "string"
        description: "Optional[Copy of the running datastore subset and/or state\n\
          data that matched the filter criteria (if any).\nAn empty data container\
          \ indicates that the request did not\nproduce any results.] REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
    example:
      data: "data"
  ietf.netconf.getconfig.Output:
    properties:
      data:
        type: "string"
        description: "Optional[Copy of the source datastore subset that matched\n\
          the filter criteria (if any).  An empty data container\nindicates that the\
          \ request did not produce any results.] REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
    example:
      data: "data"
  ietf.netconf.copyconfig.input.Source:
    properties:
      running:
        type: "string"
        description: "Optional[The running configuration is the config source.] REF:Optional.empty"
        x-choice: "config-source:running"
      candidate:
        type: "string"
        description: "Optional[The candidate configuration is the config source.]\
          \ REF:Optional.empty"
        x-choice: "config-source:candidate"
      config:
        type: "string"
        description: "Optional[Inline Config content: <config> element.  Represents\n\
          an entire configuration datastore, not\na subset of the running datastore.]\
          \ REF:Optional.empty"
        x-choice: "config-source:config"
      startup:
        type: "string"
        description: "Optional[The startup configuration is the config source.] REF:Optional.empty"
        x-choice: "config-source:startup"
      url:
        type: "string"
        description: "Optional[The URL-based configuration is the config source.]\
          \ REF:Optional.empty"
        x-choice: "config-source:url"
    description: "Optional[Particular configuration to copy from.] REF:Optional.empty"
  ietf.netconf.copyconfig.input.Target:
    properties:
      running:
        type: "string"
        description: "Optional[The running configuration is the config target.\nThis\
          \ is optional-to-implement on the server.] REF:Optional.empty"
        x-choice: "config-target:running"
      candidate:
        type: "string"
        description: "Optional[The candidate configuration is the config target.]\
          \ REF:Optional.empty"
        x-choice: "config-target:candidate"
      startup:
        type: "string"
        description: "Optional[The startup configuration is the config target.] REF:Optional.empty"
        x-choice: "config-target:startup"
      url:
        type: "string"
        description: "Optional[The URL-based configuration is the config target.]\
          \ REF:Optional.empty"
        x-choice: "config-target:url"
    description: "Optional[Particular configuration to copy to.] REF:Optional.empty"
  ietf.netconf.deleteconfig.input.Target:
    properties:
      startup:
        type: "string"
        description: "Optional[The startup configuration is the config target.] REF:Optional.empty"
        x-choice: "config-target:startup"
      url:
        type: "string"
        description: "Optional[The URL-based configuration is the config target.]\
          \ REF:Optional.empty"
        x-choice: "config-target:url"
    description: "Optional[Particular configuration to delete.] REF:Optional.empty"
  ietf.netconf.editconfig.input.Target:
    properties:
      running:
        type: "string"
        description: "Optional[The running configuration is the config source.] REF:Optional.empty"
        x-choice: "config-target:running"
      candidate:
        type: "string"
        description: "Optional[The candidate configuration is the config target.]\
          \ REF:Optional.empty"
        x-choice: "config-target:candidate"
    description: "Optional[Particular configuration to edit.] REF:Optional.empty"
  ietf.netconf.getconfig.input.Source:
    properties:
      running:
        type: "string"
        description: "Optional[The running configuration is the config source.] REF:Optional.empty"
        x-choice: "config-source:running"
      candidate:
        type: "string"
        description: "Optional[The candidate configuration is the config source.]\
          \ REF:Optional.empty"
        x-choice: "config-source:candidate"
      startup:
        type: "string"
        description: "Optional[The startup configuration is the config source.\nThis\
          \ is optional-to-implement on the server because\nnot all servers will support\
          \ filtering for this\ndatastore.] REF:Optional.empty"
        x-choice: "config-source:startup"
    description: "Optional[Particular configuration to retrieve.] REF:Optional.empty"
  ietf.netconf.lock.input.Target:
    properties:
      running:
        type: "string"
        description: "Optional[The running configuration is the config target.] REF:Optional.empty"
        x-choice: "config-target:running"
      candidate:
        type: "string"
        description: "Optional[The candidate configuration is the config target.]\
          \ REF:Optional.empty"
        x-choice: "config-target:candidate"
      startup:
        type: "string"
        description: "Optional[The startup configuration is the config target.] REF:Optional.empty"
        x-choice: "config-target:startup"
    description: "Optional[Particular configuration to lock.] REF:Optional.empty"
  ietf.netconf.monitoring.getschema.Output:
    properties:
      data:
        type: "string"
        description: "Optional[Contains the schema content.] REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
    example:
      data: "data"
  ietf.netconf.unlock.input.Target:
    properties:
      running:
        type: "string"
        description: "Optional[The running configuration is the config target.] REF:Optional.empty"
        x-choice: "config-target:running"
      candidate:
        type: "string"
        description: "Optional[The candidate configuration is the config target.]\
          \ REF:Optional.empty"
        x-choice: "config-target:candidate"
      startup:
        type: "string"
        description: "Optional[The startup configuration is the config target.] REF:Optional.empty"
        x-choice: "config-target:startup"
    description: "Optional[Particular configuration to unlock.] REF:Optional.empty"
  ietf.netconf.validate.input.Source:
    properties:
      running:
        type: "string"
        description: "Optional[The running configuration is the config source.] REF:Optional.empty"
        x-choice: "config-source:running"
      candidate:
        type: "string"
        description: "Optional[The candidate configuration is the config source.]\
          \ REF:Optional.empty"
        x-choice: "config-source:candidate"
      config:
        type: "string"
        description: "Optional[Inline Config content: <config> element.  Represents\n\
          an entire configuration datastore, not\na subset of the running datastore.]\
          \ REF:Optional.empty"
        x-choice: "config-source:config"
      startup:
        type: "string"
        description: "Optional[The startup configuration is the config source.] REF:Optional.empty"
        x-choice: "config-source:startup"
      url:
        type: "string"
        description: "Optional[The URL-based configuration is the config source.]\
          \ REF:Optional.empty"
        x-choice: "config-source:url"
    description: "Optional[Particular configuration to validate.] REF:Optional.empty"
  journal.clearjournal.Output:
    properties:
      journal:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
    example:
      journal: "journal"
  netconf.keystore.keystoreentry.KeyCredential:
    properties:
      passphrase:
        type: "string"
        description: "Optional[If the provided key is encrypted by a passphrase this\
          \ needs to be included. Leave empty\nif the key does not have a passphrase.\n\
          DO NOT write write this directly into the datastore, use the provided rpc's\
          \ as these will\nencrypt the passhprase before the entry is written into\
          \ the datastore.] REF:Optional.empty"
      key-id:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      private-key:
        type: "string"
        description: "Optional[Base64 encoded private key that should be used for\
          \ authentication with a netconf device.\nDo not include a public key as\
          \ that is calculated from the private key.\nDO NOT write this directly into\
          \ the datastore, use the provided rpc's as these will\nencrypt the key before\
          \ the entry is written into the datastore.] REF:Optional.empty"
  netconf.keystore.privatekeys.PrivateKey:
    properties:
      name:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      data:
        type: "string"
        description: "Optional[Base64 encoded private key.] REF:Optional.empty"
      certificate-chain:
        type: "array"
        description: "Optional[A certificate chain for this public key. Each certificate\
          \ is an X.509 v3 certificate\nstructure as specified by RFC5280, encoded\
          \ using the Base64 format.] REF:Optional.empty"
        items:
          type: "string"
  netconf.keystore.trustedcertificates.TrustedCertificate:
    properties:
      certificate:
        type: "string"
        description: "Optional[An X.509 v3 certificate structure as specified by RFC5280,\
          \ encoded using\nthe Base64 format.] REF:Optional.empty"
      name:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
  netconf.node.topology.netconfnodeconnectionstatus.unavailablecapabilities.UnavailableCapability:
    properties:
      failure-reason:
        description: "Optional.empty REF:Optional.empty"
        $ref: "#/definitions/netconf.node.topology.FailureReasonEnumeration"
      capability:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
    example:
      capability: "capability"
      failure-reason: {}
  netconf.node.topology.netconfnodeconnectionstatus.UnavailableCapabilities:
    properties:
      unavailable-capability:
        type: "array"
        description: "Optional.empty REF:Optional.empty"
        items:
          $ref: "netconf.node.topology.netconfnodeconnectionstatus.unavailablecapabilities.UnavailableCapability"
    description: "Optional.empty REF:Optional.empty"
    example:
      unavailable-capability:
      - capability: "capability"
        failure-reason: {}
      - capability: "capability"
        failure-reason: {}
  netconf.node.topology.netconfnodeconnectionparameters.NonModuleCapabilities:
    properties:
      capability:
        type: "array"
        description: "Optional[Set a list of non-module based capabilities to override\
          \ or merge non-module capabilities\nprovided in device's hello message.\
          \ Can be used for devices that do not report or\nincorrectly report non-module\
          \ based capabilities in their hello message] REF:Optional.empty"
        items:
          type: "string"
      override:
        type: "boolean"
        description: "Optional[Whether to override or merge this list of non-module\
          \ based capabilities with non-module\nbased capabilities from device] REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
    example:
      capability:
      - "capability"
      - "capability"
      override: true
  netconf.node.topology.netconfnodeconnectionparameters.YangModuleCapabilities:
    properties:
      capability:
        type: "array"
        description: "Optional[Set a list of capabilities to override capabilities\
          \ provided in device's hello message.\nCan be used for devices that do not\
          \ report any yang modules in their hello message] REF:Optional.empty"
        items:
          type: "string"
      override:
        type: "boolean"
        description: "Optional[Whether to override or merge this list of capabilities\
          \ with capabilities from device] REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
    example:
      capability:
      - "capability"
      - "capability"
      override: true
  netconf.node.topology.netconfnodeconnectionparameters.OdlHelloMessageCapabilities:
    properties:
      capability:
        type: "array"
        description: "Optional[Certain devices are non-accepting of ODL's hello message.\
          \  This allows specification of\na custom ODL hello message based on a list\
          \ of supported capabilities.] REF:Optional.empty"
        items:
          type: "string"
    description: "Optional.empty REF:Optional.empty"
    example:
      capability:
      - "capability"
      - "capability"
  netconf.node.topology.netconfnodeconnectionstatus.clusteredconnectionstatus.NodeStatus:
    properties:
      node:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      status:
        description: "Optional.empty REF:Optional.empty"
        $ref: "#/definitions/netconf.node.topology.StatusEnumeration"
    example:
      node: "node"
      status: {}
  netconf.node.topology.netconfnodeconnectionstatus.ClusteredConnectionStatus:
    properties:
      netconf-master-node:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      node-status:
        type: "array"
        description: "Optional.empty REF:Optional.empty"
        items:
          $ref: "netconf.node.topology.netconfnodeconnectionstatus.clusteredconnectionstatus.NodeStatus"
    description: "Optional.empty REF:Optional.empty"
    example:
      netconf-master-node: "netconf-master-node"
      node-status:
      - node: "node"
        status: {}
      - node: "node"
        status: {}
  netconf.node.topology.netconfschemastorage.YangLibrary:
    properties:
      password:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      yang-library-url:
        type: "string"
        description: "Optional[Yang library to be plugged as additional source provider\
          \ into the shared schema repository] REF:Optional.empty"
      username:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
    example:
      password: "password"
      yang-library-url: "yang-library-url"
      username: "username"
  netconf.node.topology.netconfnodecredentials.credentials.keyauth.KeyBased:
    properties:
      key-id:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      username:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
    example:
      key-id: "key-id"
      username: "username"
  netconf.node.topology.netconfnodeconnectionstatus.availablecapabilities.AvailableCapability:
    properties:
      capability:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      capability-origin:
        description: "Optional.empty REF:Optional.empty"
        $ref: "#/definitions/netconf.node.topology.CapabilityOriginEnumeration"
    example:
      capability: "capability"
      capability-origin: {}
  netconf.node.topology.netconfnodeconnectionstatus.AvailableCapabilities:
    properties:
      available-capability:
        type: "array"
        description: "Optional.empty REF:Optional.empty"
        items:
          $ref: "netconf.node.topology.netconfnodeconnectionstatus.availablecapabilities.AvailableCapability"
    description: "Optional.empty REF:Optional.empty"
    example:
      available-capability:
      - capability: "capability"
        capability-origin: {}
      - capability: "capability"
        capability-origin: {}
  netconf.node.topology.netconfnodecredentials.credentials.loginpwunencrypted.LoginPasswordUnencrypted:
    properties:
      password:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
      username:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
    description: "Optional.empty REF:Optional.empty"
    example:
      password: "password"
      username: "username"
  network.topology.linkattributes.Destination:
    properties:
      dest-tp:
        type: "string"
        description: "Optional[Termination point within destination node that terminates\
          \ the link.] REF:Optional.empty"
        x-path: "/network-topology/topology/node/termination-point/tp-id"
      dest-node:
        type: "string"
        description: "Optional[Destination node identifier, must be in same topology.]\
          \ REF:Optional.empty"
        x-path: "/network-topology/topology/node/node-id"
    description: "Optional.empty REF:Optional.empty"
    example:
      dest-node: "dest-node"
      dest-tp: "dest-tp"
  network.topology.linkattributes.Source:
    properties:
      source-node:
        type: "string"
        description: "Optional[Source node identifier, must be in same topology.]\
          \ REF:Optional.empty"
        x-path: "/network-topology/topology/node/node-id"
      source-tp:
        type: "string"
        description: "Optional[Termination point within source node that terminates\
          \ the link.] REF:Optional.empty"
        x-path: "/network-topology/topology/node/termination-point/tp-id"
    description: "Optional.empty REF:Optional.empty"
    example:
      source-node: "source-node"
      source-tp: "source-tp"
  network.topology.linkattributes.SupportingLink:
    properties:
      link-ref:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
        x-path: "/network-topology/topology/link/link-id"
    example:
      link-ref: "link-ref"
  cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns:
    properties:
      commit-error-pattern:
        type: "array"
        description: "Optional[Device specific commit error patterns.] REF:Optional.empty"
        items:
          type: "string"
    description: "Optional[Device specific list of commit error patterns. The following\
      \ list\nof patterns is checked in the input after 'commit' command is sent.]\
      \ REF:Optional.empty"
    example:
      commit-error-pattern:
      - "commit-error-pattern"
      - "commit-error-pattern"
  network.topology.nodeattributes.SupportingNode:
    properties:
      topology-ref:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
        x-path: "/network-topology/topology/topology-id"
      node-ref:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
        x-path: "/network-topology/topology/node/node-id"
    example:
      node-ref: "node-ref"
      topology-ref: "topology-ref"
  cli.translate.registry.errorpatterns.DefaultErrorPatterns:
    properties:
      error-pattern:
        type: "array"
        description: "Optional[Device specific error patterns.] REF:Optional.empty"
        items:
          type: "string"
    description: "Optional[Device specific list of error patterns. This list is the\
      \ primary source\nof error checking on the device. This list can be overridden\
      \ from the code.] REF:Optional.empty"
    example:
      error-pattern:
      - "error-pattern"
      - "error-pattern"
  network.topology.networktopology.topology.node.TerminationPoint:
    properties:
      tp-ref:
        type: "array"
        description: "Optional[The leaf list identifies any termination points that\
          \ the\ntermination point is dependent on, or maps onto.\nThose termination\
          \ points will themselves be contained\nin a supporting node.\nThis dependency\
          \ information can be inferred from\nthe dependencies between links.  For\
          \ this reason,\nthis item is not separately configurable.  Hence no\ncorresponding\
          \ constraint needs to be articulated.\nThe corresponding information is\
          \ simply provided by the\nimplementing system.] REF:Optional.empty"
        items:
          type: "string"
          x-path: "/network-topology/topology/node/termination-point/tp-id"
      tp-id:
        type: "string"
        description: "Optional.empty REF:Optional.empty"
    example:
      tp-ref:
      - "tp-ref"
      - "tp-ref"
      tp-id: "tp-id"
  cli.topology.clinodeconnectionstatus.AvailableCapabilities:
    properties:
      available-capability:
        type: "array"
        description: "Optional.empty REF:Optional.empty"
        items:
          type: "string"
    description: "Optional.empty REF:Optional.empty"
    example:
      available-capability:
      - "available-capability"
      - "available-capability"
