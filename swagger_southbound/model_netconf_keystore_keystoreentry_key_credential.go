/*
 * southbound
 *
 * API generated from yang definitions: [aaa-encrypt-service-config,cli-topology,cli-translate-registry,cluster-singleton-service-impl,cluster-singleton-service-spi,config,fake,general-entity,ietf-inet-types,ietf-netconf,ietf-netconf-monitoring,ietf-netconf-monitoring-extension,ietf-netconf-notifications,ietf-yang-library,ietf-yang-types,journal,nc-notifications,netconf-keystore,netconf-node-inventory,netconf-node-topology,network-topology,network-topology,notifications,opendaylight-config-dom-datastore,opendaylight-entity-ownership-service,opendaylight-inmemory-datastore-provider,opendaylight-inventory,opendaylight-legacy-entity-ownership-service-provider,opendaylight-md-sal-common,opendaylight-md-sal-dom,opendaylight-operational-dom-datastore,rpc-context,yang-ext]
 *
 * API version: 4.2.0.frinx
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger_southbound

type NetconfKeystoreKeystoreentryKeyCredential struct {
	// Optional[If the provided key is encrypted by a passphrase this needs to be included. Leave empty if the key does not have a passphrase. DO NOT write write this directly into the datastore, use the provided rpc's as these will encrypt the passhprase before the entry is written into the datastore.] REF:Optional.empty
	Passphrase string `json:"passphrase,omitempty"`
	// Optional.empty REF:Optional.empty
	KeyId string `json:"key-id,omitempty"`
	// Optional[Base64 encoded private key that should be used for authentication with a netconf device. Do not include a public key as that is calculated from the private key. DO NOT write this directly into the datastore, use the provided rpc's as these will encrypt the key before the entry is written into the datastore.] REF:Optional.empty
	PrivateKey string `json:"private-key,omitempty"`
}
